{
    "blocks": [
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                ";;; -*- lexical-binding: t; -*-\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq user-full-name \"Lucas V. R.\"\n      user-mail-address \"redacted\")\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                1,
                [
                    "disables-and-unpins",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Disables and unpins",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                ";; -*- no-byte-compile: t; -*-\n;;; $DOOMDIR/packages.el\n(package! flycheck-popup-tip :disable t)\n(package! writegood-mode :disable t)\n(package! hl-line :disable t)\n(package! revealjs :disable t)\n(package! org-re-reveal :disable t)\n(package! company :disable t)\n(unpin! doom-themes)\n(unpin! vertico)\n(unpin! treemacs)\n(unpin! evil-tex)\n(unpin! all-the-icons)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                1,
                [
                    "my-library",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "My library",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                2,
                [
                    "non-interactive",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Non-interactive",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                3,
                [
                    "advices",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Advices",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                {
                    "c": "Para desabilitar as mensagens chatas:",
                    "t": "Str"
                }
            ],
            "t": "Para"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(defun advice--inhibit-message (f &rest r) (let ((inhibit-message t)) (apply f r)))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "list-of-strings-predicate",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "List of strings predicate",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(defun string-list-p (x) (and (listp x) (--all? (stringp it) x)))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "macros",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Macros",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "todo"
                                                    ],
                                                    []
                                                ],
                                                "TODO"
                                            ],
                                            "t": "Code"
                                        },
                                        {
                                            "c": "Â ",
                                            "t": "Str"
                                        },
                                        {
                                            "c": "Defhook",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Boolean variable toggle (",
                                            "t": "Str"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        ""
                                                    ],
                                                    []
                                                ],
                                                "setq-toggle"
                                            ],
                                            "t": "Code"
                                        },
                                        {
                                            "c": ")",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(defmacro setq-toggle (s)\n  `(setq ,s (not ,s)))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                2,
                [
                    "interactive",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Interactive",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                3,
                [
                    "remove-all-advice-from-a-symbol",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Remove all advice from a symbol",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                {
                    "c": "This was taken from ",
                    "t": "Str"
                },
                {
                    "c": [
                        [
                            "",
                            [
                                ""
                            ],
                            []
                        ],
                        [
                            {
                                "c": "StackExchange",
                                "t": "Str"
                            }
                        ],
                        [
                            "https://emacs.stackexchange.com/a/24658",
                            ""
                        ]
                    ],
                    "t": "Link"
                },
                {
                    "c": " long ago.",
                    "t": "Str"
                }
            ],
            "t": "Para"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(defun advice-unadvice (sym)\n  \"Remove all advices from symbol SYM.\"\n  (interactive \"aFunction symbol: \")\n  (advice-mapc (lambda (advice _props) (advice-remove sym advice)) sym))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                1,
                [
                    "editor",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Editor",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                2,
                [
                    "completion-search-and-insertion",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Completion, search and insertion",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                3,
                [
                    "in-buffer-completion-and-insertion",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "In-buffer completion and insertion",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "AAS (auto expanding snippets)",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "elisp"
                                    ],
                                    []
                                ],
                                "(package! aas :recipe (:host github :repo \"ymarco/auto-activating-snippets\"))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Abbrev",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(add-hook! 'text-mode-hook\n           (abbrev-mode +1))\n\n(setq abbrev-file-name (concat doom-private-dir \"abbrev_defs\"))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Cape (completion-at-point extensions)",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    1,
                                    {
                                        "t": "Decimal"
                                    },
                                    {
                                        "t": "Period"
                                    }
                                ],
                                [
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Installation",
                                                            "t": "Str"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "elisp"
                                                    ],
                                                    []
                                                ],
                                                "(package! cape)\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ],
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Configuration",
                                                            "t": "Str"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "emacs-lisp"
                                                    ],
                                                    []
                                                ],
                                                "(use-package cape\n  :after corfu\n  ;; Bind dedicated completion commands\n  :bind ((\"C-c c p\" . completion-at-point) ;; capf\n         (\"C-c c t\" . complete-tag)        ;; etags\n         (\"C-c c d\" . cape-dabbrev)        ;; or dabbrev-completion\n         (\"C-c c f\" . cape-file)\n         (\"C-c c k\" . cape-keyword)\n         (\"C-c c s\" . cape-symbol)\n         (\"C-c c a\" . cape-abbrev)\n         (\"C-c c i\" . cape-ispell)\n         (\"C-c c l\" . cape-line)\n         (\"C-c c w\" . cape-dict)\n         (\"C-c c \\\\\" . cape-tex)\n         (\"C-c c &\" . cape-sgml)\n         (\"C-c c r\" . cape-rfc1345))\n  :init\n  ;; Add `completion-at-point-functions', used by `completion-at-point'.\n  (setq cape-dabbrev-check-other-buffers nil\n        cape-dabbrev-min-length 3\n        dabbrev-case-fold-search t)\n  (add-to-list 'completion-at-point-functions #'cape-file)\n  (add-to-list 'completion-at-point-functions #'cape-tex)\n  (add-to-list 'completion-at-point-functions #'cape-keyword))\n    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)\n    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)\n    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)\n    ;;(add-to-list 'completion-at-point-functions #'cape-ispell)\n    ;;(add-to-list 'completion-at-point-functions #'cape-dict)\n    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)\n    ;;(add-to-list 'completion-at-point-functions #'cape-line)\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ]
                                ]
                            ],
                            "t": "OrderedList"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Corfu",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    1,
                                    {
                                        "t": "Decimal"
                                    },
                                    {
                                        "t": "Period"
                                    }
                                ],
                                [
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Installation",
                                                            "t": "Str"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "elisp"
                                                    ],
                                                    []
                                                ],
                                                "(package! corfu :recipe (:host github :repo \"minad/corfu\" :files (\"*.el\" \"extensions/*.el\")))\n(package! popon :recipe (:type git :repo \"https://codeberg.org/akib/emacs-popon.git\"))\n(package! corfu-terminal :recipe (:type git :repo \"https://codeberg.org/akib/emacs-corfu-terminal.git\"))\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ],
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Configuration",
                                                            "t": "Str"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "emacs-lisp"
                                                    ],
                                                    []
                                                ],
                                                "(use-package corfu\n  :bind (:map corfu-map\n         (\"\\\\\" . corfu-quit)\n         (\"TAB\" . corfu-next)\n         (\"S-TAB\" . corfu-previous)\n         (\"<tab>\" . corfu-next)\n         (\"<backtab>\" . corfu-previous)\n         (\"M-s\" . corfu-insert-separator))\n  :hook (doom-first-input . global-corfu-mode)\n  \n  ;; Optional customizations\n  :custom\n  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'\n  (corfu-auto t)\n  (corfu-auto-delay 0)\n  (corfu-auto-prefix 3)\n  (corfu-preselect 'prompt)\n  ;; (corfu-commit-predicate nil)   ;; Do not commit selected candidates on next input\n  ;; (corfu-quit-at-boundary t)     ;; Automatically quit at word boundary\n  (corfu-quit-no-match 'separator))        ;; Automatically quit if there is no match\n  ;; (corfu-echo-documentation nil) ;; Do not show documentation in the echo area\n  ;; You may want to enable Corfu only for certain modes.\n  ;; :hook ((prog-mode . corfu-mode)\n  ;;        (shell-mode . corfu-mode)\n  ;;        (eshell-mode . corfu-mode))\n\n;; Dabbrev works with Corfu\n(use-package dabbrev\n  :custom (dabbrev-search-all-buffers nil)\n  ;; Swap M-/ and C-M-/\n  :bind ((\"M-/\" . dabbrev-completion)\n         (\"C-M-/\" . dabbrev-expand)))\n\n;; A few more useful configurations...\n(use-package emacs\n  :init\n  ;; TAB cycle if there are only few candidates\n  (setq completion-cycle-threshold 3)\n\n  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.\n  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.\n  (setq read-extended-command-predicate\n        #'command-completion-default-include-p)\n\n  ;; Enable indentation+completion using the TAB key.\n  ;; `completion-at-point' is often bound to M-TAB.\n  (setq tab-always-indent 'complete))\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ]
                                ]
                            ],
                            "t": "OrderedList"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Color picker (Zenity)",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "elisp"
                                    ],
                                    []
                                ],
                                "(package! zenity-color-picker)\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(map! :leader :n \"e c\" #'zenity-cp-color-at-point-dwim)\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Yasnippet",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                {
                                    "c": "Fixes the issue where when a placeholder appeared on an empty line, no\nindentation was applied. For instance, this:",
                                    "t": "Str"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "org"
                                    ],
                                    []
                                ],
                                "1. bla\n   quote|\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                {
                                    "c": "would be expanded to this:",
                                    "t": "Str"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "org"
                                    ],
                                    []
                                ],
                                " 1. bla\n    ,#+begin_quote\n|\n    ,#+end_quote\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                {
                                    "c": "quite annoingâ¦",
                                    "t": "Str"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(setq yas-also-indent-empty-lines t)\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                [
                                    1,
                                    {
                                        "t": "Decimal"
                                    },
                                    {
                                        "t": "Period"
                                    }
                                ],
                                [
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Movimentos entre campos",
                                                            "t": "Str"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                {
                                                    "c": "Uma dessas coisas que se imagina, por que nÃ£o fizeram assim?",
                                                    "t": "Str"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "elisp"
                                                    ],
                                                    []
                                                ],
                                                "(defadvice! my-yas--maybe-move-to-active-field (snippet)\n  \"Try to move to SNIPPET's active (or first) field and return it if found.\"\n\n  :override #'yas--maybe-move-to-active-field\n\n  (let ((target-field (or (yas--snippet-active-field snippet)\n                          (car (yas--snippet-fields snippet)))))\n    (when target-field\n      (yas--move-to-field snippet target-field)\n      (goto-char (yas--field-end target-field))\n      target-field)))\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ],
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Interaction with Corfu",
                                                            "t": "Str"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "emacs-lisp"
                                                    ],
                                                    []
                                                ],
                                                "(defadvice! yas-expand-filter-corfu-a (&rest r)\n  :before-while #'yas-maybe-expand-abbrev-key-filter\n  (not (and (frame-live-p corfu--frame) (frame-visible-p corfu--frame))))\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ]
                                ]
                            ],
                            "t": "OrderedList"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                3,
                [
                    "gui-enhacements",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "GUI enhacements",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Kind-icon",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "elisp"
                                    ],
                                    []
                                ],
                                "(package! kind-icon)\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(use-package kind-icon\n  :after corfu\n  :custom\n  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly\n  :config\n  (setq kind-icon-default-style '(:padding 0 :stroke 0 :margin 0 :radius 0 :height 0.8 :scale 1.0))\n  (add-hook! 'doom-load-theme-hook #'kind-icon-reset-cache)\n  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                3,
                [
                    "global-search-and-completion",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Global search and completion",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Consult",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    1,
                                    {
                                        "t": "Decimal"
                                    },
                                    {
                                        "t": "Period"
                                    }
                                ],
                                [
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Installation",
                                                            "t": "Str"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "elisp"
                                                    ],
                                                    []
                                                ],
                                                "(unpin! consult)\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ],
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Configuration",
                                                            "t": "Str"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "emacs-lisp"
                                                    ],
                                                    []
                                                ],
                                                "(use-package consult\n  :bind (:map doom-leader-map\n              (\",\" . consult-buffer)))\n\n(after! consult\n  (map! :n \"M-y\"      #'consult-yank-replace \n        :leader \"h I\" #'consult-info\n                \"r r\" #'consult-register\n                \"r s\" #'consult-register-store\n                \"r l\" #'consult-register-load))\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ]
                                ]
                            ],
                            "t": "OrderedList"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Orderless",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(use-package corfu\n  :config\n  (setq completion-styles '(basic-limited orderless basic)))\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                {
                                    "c": "TambÃ©m quero que tenha inicialismos (por exemplo, ",
                                    "t": "Str"
                                },
                                {
                                    "c": [
                                        [
                                            "",
                                            [
                                                ""
                                            ],
                                            []
                                        ],
                                        "hmlm -> hide-mode-line-mode"
                                    ],
                                    "t": "Code"
                                },
                                {
                                    "c": "):",
                                    "t": "Str"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(setq orderless-matching-styles\n      '(orderless-initialism\n        orderless-literal\n        orderless-regexp))\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                [
                                    1,
                                    {
                                        "t": "Decimal"
                                    },
                                    {
                                        "t": "Period"
                                    }
                                ],
                                [
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Orderless fast dispatch",
                                                            "t": "Str"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "emacs-lisp"
                                                    ],
                                                    []
                                                ],
                                                "(defun basic-limited-all-completions (string table pred point)\n  (when (length< string 4)\n    (completion-emacs21-all-completions string table pred point)))\n\n(defun basic-limited-try-completion (string table pred point)\n  (when (length< string 4)\n    (completion-emacs21-try-completion string table pred point)))\n\n(add-to-list 'completion-styles-alist\n             '(basic-limited\n               basic-limited-try-completion\n               basic-limited-all-completions\n               \"Limited basic completion.\"))\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ]
                                ]
                            ],
                            "t": "OrderedList"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Register interaction with Evil",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(after! (consult evil)\n  (defadvice! evil-paste--pretend-to-be-yank-a (&rest _r)\n    :after #'evil-paste-after\n    :after #'evil-paste-before\n    (setq this-command 'yank\n          yank-undo-function (lambda (_ _) (evil-undo-pop)))))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Vertico",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    1,
                                    {
                                        "t": "Decimal"
                                    },
                                    {
                                        "t": "Period"
                                    }
                                ],
                                [
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Configuration",
                                                            "t": "Str"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "emacs-lisp"
                                                    ],
                                                    []
                                                ],
                                                "(use-package vertico\n  :bind (:map vertico-map\n         (\"M-k\" . vertico-next)\n         (\"M-j\" . vertico-previous))\n  :config\n  ;; (vertico-reverse-mode +1)\n  (setq vertico-resize nil\n        vertico-count 8))\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ]
                                ]
                            ],
                            "t": "OrderedList"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                2,
                [
                    "help-and-error-system",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Help and error system",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                3,
                [
                    "eldoc-box",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Eldoc-box",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! eldoc-box)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "jinx-spell",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Jinx (spell)",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! jinx)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(use-package jinx\n  :config\n  (setq jinx-languages \"pt_BR en_US\")\n  (dolist (hook '(text-mode-hook conf-mode-hook))\n    (add-hook hook #'jinx-mode))\n  (define-key evil-visual-state-map \"z=\" 'jinx-correct)\n  (define-key evil-normal-state-map \"z=\" 'jinx-correct))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "which-key",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Which-key",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Posframe",
                                            "t": "Str"
                                        },
                                        {
                                            "c": "Â ",
                                            "t": "Str"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "tag"
                                                    ],
                                                    []
                                                ],
                                                [
                                                    {
                                                        "c": "ARCHIVE",
                                                        "t": "Str"
                                                    }
                                                ]
                                            ],
                                            "t": "Span"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "elisp"
                                    ],
                                    []
                                ],
                                "(package! which-key-posframe)\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(use-package which-key-posframe\n  :hook (which-key-mode . which-key-posframe-mode)\n  :config\n  (add-hook 'doom-after-reload-hook #'posframe-delete-all)\n  (setq which-key-posframe-poshandler #'posframe-poshandler-frame-bottom-center))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                2,
                [
                    "organize-text-editing",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "ORGANIZE Text editing",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                3,
                [
                    "evil",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Evil",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Variables",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(setq evil-shift-round nil\n      evil-cross-lines t\n      evil-move-cursor-back nil\n      evil-want-fine-undo t\n      evil-snipe-spillover-scope 'visible\n      evil-respect-visual-line-mode t\n\n      ;; Substitui vÃ¡rios matches por linha no evil-ex\n      evil-ex-substitute-global t)\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                {
                                    "c": "This is very important. The newline at the end of a line is a character too!",
                                    "t": "Str"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(setq evil-move-beyond-eol t)\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Mouse bindings for multicursor (",
                                            "t": "Str"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        ""
                                                    ],
                                                    []
                                                ],
                                                "evil-mc"
                                            ],
                                            "t": "Code"
                                        },
                                        {
                                            "c": ")",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                {
                                    "c": "Toggle multicursors at mouse pointer with ",
                                    "t": "Str"
                                },
                                {
                                    "c": [
                                        [
                                            "",
                                            [
                                                ""
                                            ],
                                            []
                                        ],
                                        "C-<mouse-1>"
                                    ],
                                    "t": "Code"
                                },
                                {
                                    "c": ".",
                                    "t": "Str"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "elisp"
                                    ],
                                    []
                                ],
                                "(defun evil-mc/toggle-cursor-on-click (event)\n  \"Add a cursor where you click, or remove a fake cursor that is\nalready there.\"\n  (interactive \"e\")\n  (mouse-minibuffer-check event)\n  (require 'evil-mc)\n  ;; Use event-end in case called from mouse-drag-region.\n  ;; If EVENT is a click, event-end and event-start give same value.\n  (let ((position (event-end event)))\n    (if (not (windowp (posn-window position)))\n        (error \"Position not in text area of window\"))\n    (select-window (posn-window position))\n    (let ((pt (posn-point position)))\n      (if (numberp pt)\n          ;; is there a fake cursor with the actual *point* right where we are?\n          (unless (evil-mc-undo-cursor-at-pos pt)\n            (save-excursion\n              (goto-char pt)\n              (evil-mc-make-cursor-here)))))))\n\n(after! evil\n  (map! \"C-<down-mouse-1>\" nil)\n  (map! \"C-<mouse-1>\" #'evil-mc/toggle-cursor-on-click))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Text objects",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    1,
                                    {
                                        "t": "Decimal"
                                    },
                                    {
                                        "t": "Period"
                                    }
                                ],
                                [
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Org headlines",
                                                            "t": "Str"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "elisp"
                                                    ],
                                                    []
                                                ],
                                                "(defun evil-org--parse-headline ()\n  (save-excursion\n    (end-of-line)\n    (outline-previous-heading)\n    (skip-chars-forward \"* \\t\")\n    (let* ((todo-start     (point))\n           (todo-end1      (and org-todo-regexp\n                                (let (case-fold-search) (looking-at (concat org-todo-regexp \" \")))\n                                (goto-char (1- (match-end 0)))))\n           (todo-end2      (when todo-end1 (skip-chars-forward \" \\t\") (point)))\n           (priority-start (point))\n           (priority-end   (when (looking-at \"\\\\[#.\\\\][ \\t]*\") (goto-char (match-end 0))))\n           (_              (and (let (case-fold-search) (looking-at org-comment-string))\n                                (goto-char (match-end 0))))\n           (title-start    (point))\n           (tags-start     (when (re-search-forward \"[ \\t]+\\\\(:[[:alnum:]_@#%:]+:\\\\)[ \\t]*$\"\n                                                    (line-end-position) 'move)\n                             (goto-char (match-beginning 0))\n                             (match-beginning 1)))\n           (title-end      (point)))\n      (list todo-start todo-end1 todo-end2 priority-start\n            priority-end title-start title-end\n            tags-start (line-end-position)))))\n\n(after! evil\n  (evil-define-text-object evil-org-headline (count &optional beg end type)\n    \"Select the current org heading\" :jump t\n    (save-excursion\n      (end-of-line)\n      (outline-previous-heading)\n      (list (line-beginning-position) (line-end-position))))\n  \n  (evil-define-text-object evil-org-headline-title (c &rest _)\n    \"Select the title text in the current org heading\" :jump t\n    (let ((parse (evil-org--parse-headline)))\n      (list (nth 5 parse) (nth 6 parse))))\n  \n  (evil-define-text-object evil-org-headline-todo (c &rest _)\n    \"Select the todo entry in the current org heading\" :jump t\n    (let ((parse (evil-org--parse-headline)))\n      (list (nth 0 parse) (nth 2 parse))))\n  \n  (evil-define-text-object evil-org-headline-inner-todo (c &rest _)\n    \"Select the inner todo entry in the current org heading\" :jump t\n    (let ((parse (evil-org--parse-headline)))\n      (list (nth 0 parse) (nth 1 parse))))\n  \n  (evil-define-text-object evil-org-headline-priority (c &rest _)\n    \"Select the priority entry in the current org heading\" :jump t\n    (let ((parse (evil-org--parse-headline)))\n      (list (nth 3 parse) (nth 4 parse))))\n  \n  (evil-define-text-object evil-org-headline-tags (c &rest _)\n    \"Select the tags in the current org heading\" :jump t\n    (let ((parse (evil-org--parse-headline)))\n      (list (nth 6 parse) (nth 8 parse))))\n  \n  (evil-define-text-object evil-org-headline-inner-priority (c &rest r)\n    \"Select the inner part of priority in the current org heading\" :jump t\n    (let ((parse (evil-org--parse-headline)))\n      (when (nth 4 parse)\n        (let ((p (+ 2 (nth 3 parse)))) (list p (1+ p))))))\n  \n  (evil-define-text-object evil-org-headline-inner-tags (c &rest _)\n    \"Select the inner part of tags in the current org heading\" :jump t\n    (let ((parse (evil-org--parse-headline)))\n      (when (nth 7 parse)\n        (list (1+ (nth 7 parse)) (1- (nth 8 parse))))))\n  \n  (map! :map 'evil-inner-text-objects-map\n        \"h h\" #'evil-org-headline-title\n        \"h t\" #'evil-org-headline-inner-todo\n        \"h p\" #'evil-org-headline-inner-priority\n        \"h a\" #'evil-org-headline-inner-tags)\n  \n  (map! :map 'evil-outer-text-objects-map\n        \"h h\" #'evil-org-headline\n        \"h t\" #'evil-org-headline-todo\n        \"h p\" #'evil-org-headline-priority\n        \"h a\" #'evil-org-headline-tags))\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ],
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "CameL case",
                                                            "t": "Str"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "emacs-lisp"
                                                    ],
                                                    []
                                                ],
                                                "(after! evil\n  (evil-define-text-object evil-prog-camelcase (c &rest _)\n    \"Select a camelCase \\\"word\\\". For instance, if cursor is at | in\ncamelCase|dWord, then it selects \\\"Cased\\\".\" :jump t\n    (let ((case-fold-search nil))\n       (if-let* ((_     (looking-at-p \"[[:lower:]]\"))\n                 (begin (save-excursion (re-search-backward \"[[:upper:]]\\\\|[^[:alpha:]].\")\n                                        (match-end 0)))\n                 (end   (save-excursion (re-search-forward \"[^[:lower:]]\"))))\n           (list (1- begin) (1- end))\n         (if-let* ((_   (looking-at-p \"[[:upper:]]\"))\n                   (end (save-excursion (re-search-forward \"[[:alpha:]][[:upper:]]\\\\|[^[:alpha:]]\")\n                                        (match-end 0))))\n             (list (point) (1- end)))))))\n\n(map! :mode 'prog-mode\n      :map 'evil-inner-text-objects-map\n      \"l\" #'evil-prog-camelcase)\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ]
                                ]
                            ],
                            "t": "OrderedList"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                3,
                [
                    "scroll",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Scroll",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq mouse-wheel-scroll-amount '(3 ((shift) . 6)) ;; one line at a time\n      mouse-wheel-progressive-speed nil ;; don't accelerate scrolling\n      scroll-margin 0\n      scroll-step 1) ;; keyboard scroll one line at a time\n\n(when (fboundp 'pixel-scroll-precision-mode)\n  (pixel-scroll-precision-mode +1)\n  (setq pixel-scroll-precision-interpolate-mice nil))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "variables-1",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Variables",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq-default fill-column 80)\n\n(setq amalgamating-undo-limit 3)\n\n(setq tab-always-indent t)\n\n;; (setq company-idle-delay 0.1\n;;       company-minimum-prefix-length 1)\n\n(setq mouse-drag-and-drop-region t\n      mouse-drag-and-drop-region-cut-when-buffers-differ t\n      mouse-drag-and-drop-region-show-tooltip nil)\n\n(setq default-input-method \"TeX\")\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                {
                    "c": "Deixa o ",
                    "t": "Str"
                },
                {
                    "c": [
                        [
                            "",
                            [
                                ""
                            ],
                            []
                        ],
                        "text-scale-mode"
                    ],
                    "t": "Code"
                },
                {
                    "c": " mais devagar.",
                    "t": "Str"
                }
            ],
            "t": "Para"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq text-scale-mode-step 1.05)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "shrink-whitespace",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Shrink whitespace",
                        "t": "Str"
                    },
                    {
                        "c": "Â ",
                        "t": "Str"
                    },
                    {
                        "c": [
                            [
                                "",
                                [
                                    "tag"
                                ],
                                []
                            ],
                            [
                                {
                                    "c": "bindings",
                                    "t": "Str"
                                }
                            ]
                        ],
                        "t": "Span"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq doom-leader-alt-key \"M-SPC\")\n(map! :i \"C-SPC\" #'cycle-spacing)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "highlighting-tree-sitter",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Highlighting (Tree-sitter)",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(global-tree-sitter-mode)\n(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "saving",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Saving",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                {
                    "c": "Desabilita a mensagem de salvamento.",
                    "t": "Str"
                }
            ],
            "t": "Para"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(advice-add 'save-buffer :around #'advice--inhibit-message)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "blink-cursor",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Blink cursor",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(blink-cursor-mode -1)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "enable-perl-like-regex-search",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Enable perl-like regex search",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(pcre-mode +1)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "popups",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Popups",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq +popup-defaults\n      '(:side bottom\n        :height 0.3\n        :width 130\n        :quit t\n        :select ignore\n        :ttl 5))\n\n(setq +popup-default-alist\n      '((window-height . 0.3)\n        (reusable-frames . visible)))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "others",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Others",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(remove-hook! '(org-mode-hook text-mode-hook) #'flyspell-mode)\n(remove-hook! 'org-mode-hook #'org-cdlatex-mode)\n\n(setq vterm-shell \"zsh\"\n      delete-by-moving-to-trash t\n      mouse-autoselect-window nil)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "formatting",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Formatting",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                3,
                [
                    "apheleia",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Apheleia",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! apheleia)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(use-package apheleia\n  :config\n  (push '(fourmolu . (\"fourmolu\" \"--stdin-input-file\" (or (buffer-file-name) (buffer-name)))) apheleia-formatters)\n  (setf (alist-get 'latexindent apheleia-formatters) '(\"latexindent\" \"-y=defaultIndent:'  '\" \"--logfile=/dev/null\"))\n  (setf (alist-get 'haskell-mode apheleia-mode-alist) 'fourmolu))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "ws-butler",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "WS butler",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(after! ws-butler\n  (setq ws-butler-global-exempt-modes\n        '(special-mode\n          comint-mode\n          term-mode\n          eshell-mode\n          diff-mode\n          markdown-mode\n          org-mode\n          latex-mode)))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "selection",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Selection",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                3,
                [
                    "expand-region",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Expand-region",
                        "t": "Str"
                    },
                    {
                        "c": "Â ",
                        "t": "Str"
                    },
                    {
                        "c": [
                            [
                                "",
                                [
                                    "tag"
                                ],
                                []
                            ],
                            [
                                {
                                    "c": "bindings",
                                    "t": "Str"
                                }
                            ]
                        ],
                        "t": "Span"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(use-package expand-region\n  :config\n  (map! :n \"C-a\" #'er/expand-region\n           \"C-S-a\" #'er/contract-region))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "overall-ui",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Overall UI",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                3,
                [
                    "doom-dashboard",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Doom dashboard",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                {
                    "c": "Small dashboard changes:",
                    "t": "Str"
                }
            ],
            "t": "Para"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                ";; Disables \"benchmark\" echo message\n(remove-hook 'window-setup-hook #'doom-display-benchmark-h)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Banner",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(setq +doom-dashboard-functions '(doom-dashboard-widget-shortmenu\n                                  doom-dashboard-widget-loaded))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                3,
                [
                    "organize-faces",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "ORGANIZE Faces",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Fonts",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                {
                                    "c": "Note: the twemoji font is the CBDT/CBLC variant from Fedora, and in AUR it is named ",
                                    "t": "Str"
                                },
                                {
                                    "c": [
                                        [
                                            "",
                                            [
                                                ""
                                            ],
                                            []
                                        ],
                                        "ttf-twemoji"
                                    ],
                                    "t": "Code"
                                },
                                {
                                    "c": ". The SVG-in-OTF variant ",
                                    "t": "Str"
                                },
                                {
                                    "c": [
                                        {
                                            "c": "will not",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Underline"
                                },
                                {
                                    "c": " work!",
                                    "t": "Str"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                {
                                    "c": "If it works, you will see a twemoji smile: ð",
                                    "t": "Str"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(setq doom-font                (font-spec :family \"Victor Mono\" :size 19 :weight 'medium)\n      doom-variable-pitch-font (font-spec :family \"IBM Plex Sans\" :size 19 :weight 'normal)\n      doom-serif-font          (font-spec :family \"IBM Plex Mono\" :weight 'light))\n      ;; doom-unicode-font        (font-spec :family \"JuliaMono\" :weight 'normal))\n\n;; Colocamos uma ordem de prioridade para tentar ter todos os unicodes e emojis.\n(setq use-default-font-for-symbols t)\n(defun my/adjust-fonts ()\n  ;; (set-fontset-font t 'unicode (font-spec :family \"Concrete Math\"))\n  (set-fontset-font t 'unicode (font-spec :family \"Julia Mono\") nil 'append)\n  (set-fontset-font t 'emoji \"Twemoji\" nil 'prepend))\n\n(add-hook! 'after-setting-font-hook #'my/adjust-fonts)\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Comments and keywords",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                {
                                    "c": "Deixamos os comentÃ¡rios itÃ¡licas, e os ",
                                    "t": "Str"
                                },
                                {
                                    "c": [
                                        [
                                            "",
                                            [
                                                ""
                                            ],
                                            []
                                        ],
                                        "keywords"
                                    ],
                                    "t": "Code"
                                },
                                {
                                    "c": " oblÃ­quos.",
                                    "t": "Str"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(custom-set-faces!\n  '(font-lock-comment-face :slant italic :weight normal)\n  '(font-lock-keyword-face :slant italic :weight normal))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Child frames",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(custom-set-faces!\n  `(child-frame-border :inherit default))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Echo area",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(defun customize-echo ()\n  (with-current-buffer \" *Echo Area 0*\"\n    (face-remap-add-relative 'default '(:family \"Julia Mono\"))\n    (face-remap-add-relative 'default '(:height 140 :inherit shadow)))\n  (with-current-buffer \" *Echo Area 1*\"\n    (face-remap-add-relative 'default '(:family \"Julia Mono\"))\n    (face-remap-add-relative 'default '(:height 140 :inherit shadow))))\n\n;; (add-hook 'doom-load-theme-hook #'customize-echo 40)\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Icons",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                {
                                    "c": "Adjusts the icon sizes so they are a bit smaller.",
                                    "t": "Str"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(setq all-the-icons-scale-factor 0.88)\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Ligatures",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "elisp"
                                    ],
                                    []
                                ],
                                "(package! ligature :recipe (:host github :repo \"mickeynp/ligature.el\"))\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(use-package ligature\n  :config\n  (ligature-set-ligatures\n   't '(\"</\" \"</>\" \"/>\" \"~-\" \"-~\" \"~@\" \"<~\" \"<~>\" \"<~~\" \"~>\" \"~~\"\n        \"~~>\" \">=\" \"<=\" \"<!--\" \"##\" \"###\" \"####\" \"|-\" \"-|\" \"|->\"\n        \"<-|\" \">-|\" \"|-<\" \"|=\" \"|=>\" \"<-\" \"<--\" \"-->\" \"->\" \"-<\"\n        \">->\" \">>-\" \"<<-\" \"<->\" \"->>\" \"-<<\" \"<-<\" \"==>\" \"=>\" \"=/=\"\n        \"!==\" \"!=\" \"<==\" \">>=\" \"=>>\" \">=>\" \"<=>\" \"<=<\" \"<<=\" \"=<<\"\n        \".-\" \".=\" \"=:=\" \"=!=\" \"==\" \"===\" \"::\" \":=\" \":>\" \":<\" \">:\"\n        \"<|\" \"<|>\" \"|>\" \"<>\" \"<$\" \"<$>\" \"$>\" \"<+\" \"<+>\" \"+>\"\n        \"?=\" \"/=\" \"/==\" \"/\\\\\" \"\\\\/\" \"__\" \"&&\" \"++\" \"+++\"))\n  ;; Enables ligature checks globally in all buffers. You can also do it\n  ;; per mode with `ligature-mode'.\n  (global-ligature-mode t))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Mixed-pitch",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(defface my-mixed-pitch-face '((t . nil))\n  \"Face for `mixed-pitch-mode'\")\n(custom-set-faces!\n  '(my-mixed-pitch-face :family \"Alegreya Sans Scaled\" :height 1.1))\n\n(setq mixed-pitch-face 'my-mixed-pitch-face\n      mixed-pitch-set-height nil)\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                {
                                    "c": "No modeline pode aparecer um trecho com fonte ",
                                    "t": "Str"
                                },
                                {
                                    "c": [
                                        [
                                            "",
                                            [
                                                ""
                                            ],
                                            []
                                        ],
                                        "font-lock-string-face"
                                    ],
                                    "t": "Code"
                                },
                                {
                                    "c": ". Como fica feio, vamos removÃª-lo.",
                                    "t": "Str"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                {
                                    "c": "AlÃ©m disso, ",
                                    "t": "Str"
                                },
                                {
                                    "c": [
                                        [
                                            "",
                                            [
                                                ""
                                            ],
                                            []
                                        ],
                                        "org-drawer"
                                    ],
                                    "t": "Code"
                                },
                                {
                                    "c": " nÃ£o estÃ¡ na lista por padrÃ£o.",
                                    "t": "Str"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(after! mixed-pitch\n  (setq mixed-pitch-fixed-pitch-faces\n        (seq-difference\n         (seq-union mixed-pitch-fixed-pitch-faces\n                    '(org-drawer))\n         '(font-lock-string-face diff-added diff-removed))))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Yasnippet",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(custom-set-faces!\n  `(yas-field-highlight-face\n    :inherit nil\n    :background ,(doom-blend \"#b315b3\" (face-attribute 'default :background) 0.2)\n    :foreground \"undefined\"))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                3,
                [
                    "mode-line",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Mode-line",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Faces",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(custom-set-faces!\n  '(mode-line :height 105 :family \"Julia Mono\")\n  '(mode-line-inactive :height 105 :family \"Julia Mono\")\n  '(doom-modeline-buffer-modified :underline t :inherit nil)\n  '(doom-modeline-info :foreground \"white\"))\n(setq! doom-modeline-height 22\n       doom-modeline-bar-width 1)\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Doom mode-line",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(setq doom-modeline-irc nil\n      doom-modeline-icon nil)\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "elisp"
                                    ],
                                    []
                                ],
                                "(after! doom-modeline\n  (doom-modeline-def-segment buffer-name\n    \"Display the current buffer's name, without any other information.\"\n    (concat\n      (doom-modeline-spc)\n      (doom-modeline--buffer-name)))\n\n  (doom-modeline-def-segment pdf-icon\n    \"PDF icon from all-the-icons.\"\n    (concat\n      (doom-modeline-spc)\n      (doom-modeline-icon 'octicon \"file-pdf\" nil nil\n                          :face (if (doom-modeline--active)\n                                    'all-the-icons-red\n                                  'mode-line-inactive)\n                          :v-adjust 0.02)))\n\n  (defun doom-modeline-update-pdf-pages ()\n    \"Update PDF pages.\"\n    (setq doom-modeline--pdf-pages\n          (let ((current-page-str (number-to-string (eval `(pdf-view-current-page))))\n                (total-page-str (number-to-string (pdf-cache-number-of-pages))))\n            (concat\n              (propertize\n                (concat (make-string (- (length total-page-str) (length current-page-str)) 32)\n                      \" P\" current-page-str)\n                'face 'mode-line)\n              (propertize (concat \"/\" total-page-str) 'face 'doom-modeline-buffer-minor-mode)))))\n\n  (doom-modeline-def-segment pdf-pages\n    \"Display PDF pages.\"\n    (if (doom-modeline--active) doom-modeline--pdf-pages\n      (propertize doom-modeline--pdf-pages 'face 'mode-line-inactive)))\n\n  (doom-modeline-def-modeline 'pdf\n    '(bar window-number pdf-pages pdf-icon buffer-name)\n    '(misc-info matches major-mode process vcs)))\n\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                3,
                [
                    "tab-bar",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Tab bar",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(map! :n \"M-z\" #'toggle-frame-tab-bar)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "treemacs",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Treemacs",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Esconder algumas coisas",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                {
                                    "c": "Roubado do tecosaur.",
                                    "t": "Str"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(defcustom treemacs-file-ignore-extensions\n  '(\"aux\" \"ptc\" \"fdb_latexmk\" \"fls\" \"synctex.gz\" \"toc\"         ;; LaTeX\n    \"glg\"  \"glo\"  \"gls\"  \"glsdefs\"  \"ist\"  \"acn\"  \"acr\"  \"alg\" ;; LaTeX - glossary\n    \"mw\"                                                       ;; LaTeX - pgfplots\n    \"pdfa.xmpi\")                                               ;; LaTeX - pdfx\n  \"File extension which `treemacs-ignore-filter' will ensure are ignored\"\n  :safe #'string-list-p)\n\n(defcustom treemacs-file-ignore-globs\n  '(\"*/_minted-*\"                                        ;; LaTeX\n     \"*/.auctex-auto\" \"*/_region_.log\" \"*/_region_.tex\") ;; AucTeX\n  \"Globs which will are transformed to `treemacs-file-ignore-regexps'\nwhich `treemacs-ignore-filter' will ensure are ignored\"\n  :safe #'string-list-p)\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Make treemacs fringes appear",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                {
                                    "c": "They only appear if this variable is set to a value ",
                                    "t": "Str"
                                },
                                {
                                    "c": [
                                        {
                                            "t": "InlineMath"
                                        },
                                        "\\ge"
                                    ],
                                    "t": "Math"
                                },
                                {
                                    "t": "SoftBreak"
                                },
                                {
                                    "c": "}",
                                    "t": "Str"
                                },
                                {
                                    "c": "}",
                                    "t": "Str"
                                },
                                {
                                    "c": " 7.",
                                    "t": "Str"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(setq doom-themes-treemacs-bitmap-indicator-width 7)\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                3,
                [
                    "theme",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Theme",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq doom-theme 'ef-cherie)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "ef-themes",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "elisp"
                                    ],
                                    []
                                ],
                                "(package! ef-themes)\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                3,
                [
                    "window-divisors",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Window divisors",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq window-divider-default-bottom-width 2   ; default is 1\n      window-divider-default-right-width  2)  ; default is 1\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                1,
                [
                    "living-in-emacs",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Living in Emacs",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                2,
                [
                    "lsp",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "LSP",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(unpin! lsp-mode)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(use-package lsp\n  :custom\n  (lsp-completion-provider :none)\n  (lsp-lens-enable t)\n  (lsp-enable-snippet nil)\n  (lsp-use-plists \"true\")\n  :init\n  (defun my/lsp-mode-setup-completion ()\n    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))\n          '(orderless)))\n  :hook\n  (lsp-completion-mode . my/lsp-mode-setup-completion))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(map! :map 'lsp-mode-map :leader :n \"c f\" #'lsp-format-buffer)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "lsp-ui",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "LSP-UI",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq lsp-ui-sideline-diagnostic-max-lines 10)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "terminal",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Terminal",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                3,
                [
                    "eat-emulate-a-terminal",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Eat (Emulate A Terminal)",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Installation",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "elisp"
                                    ],
                                    []
                                ],
                                "(package! eat)\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                2,
                [
                    "calibre",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Calibre",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! calibredb)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "vcgitmagit",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "VC/Git/Magit",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                3,
                [
                    "magit-todos",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Magit Todos",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(put 'magit-todos-exclude-globs 'safe-local-variable #'listp)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "git-auto-commit-mode",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Git Auto Commit Mode",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! git-auto-commit-mode)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(pushnew! safe-local-variable-values '(gac-automatically-push-p . t))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                1,
                [
                    "organize-features",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "ORGANIZE Features",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                2,
                [
                    "benchmark-init",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Benchmark init",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! benchmark-init :recipe (:host github :repo \"kekeimiku/benchmark-init-el\"))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "citations-and-citar",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Citations and Citar",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(use-package citar\n  :custom\n  (citar-file-open-functions '((\"pdf\" . citar-file-open-external)))\n  (citar-bibliography '(\"/home/lucas/Zotero/bibs/all.bib\"))\n  (org-cite-csl-styles-dir \"/home/lucas/Zotero/styles\")\n  (citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \")\n                   (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \")\n                   (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \")))\n  (citar-symbol-separator \" \"))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "citar-org-roam-templates",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": [
                            [
                                "",
                                [
                                    ""
                                ],
                                []
                            ],
                            "citar-org-roam"
                        ],
                        "t": "Code"
                    },
                    {
                        "c": " templates",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq citar-org-roam-note-title-template \"${author editor}: ${title}\")\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "org-cite-csl-activate",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Org-cite-csl-activate",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(unpin! citar) \n(package! oc-csl-activate :recipe (:host github :repo \"andras-simonyi/org-cite-csl-activate\"))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(use-package oc-csl-activate\n  :after (org citar)\n  :config\n  (setq org-cite-activate-processor 'csl-activate\n        org-cite-csl-activate-use-document-style t)\n  (add-hook 'org-font-lock-hook (lambda (&rest _) (org-cite-csl-activate-render-all)))\n  (add-hook! org-mode\n    (cursor-sensor-mode +1)))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "crdt",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "CRDT",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! crdt)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "elfeed",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Elfeed",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(after! elfeed\n    (setq elfeed-search-filter \"@3-year-old #200\"))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! elfeed-goodies :disable t)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "elfeed-tube",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Elfeed-tube",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! elfeed-tube)\n(package! elfeed-tube-mpv)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(use-package elfeed-tube\n  :after elfeed\n  :demand t\n  :config\n  ;; (setq elfeed-tube-auto-save-p nil) ; default value\n  ;; (setq elfeed-tube-auto-fetch-p t)  ; default value\n  (elfeed-tube-setup)\n\n  :bind (:map elfeed-show-mode-map\n         (\"F\" . elfeed-tube-fetch)\n         ([remap save-buffer] . elfeed-tube-save)\n         :map elfeed-search-mode-map\n         (\"F\" . elfeed-tube-fetch)\n         ([remap save-buffer] . elfeed-tube-save)))\n\n(use-package elfeed-tube-mpv\n  :bind (:map elfeed-show-mode-map\n              (\"C-c C-f\" . elfeed-tube-mpv-follow-mode)\n              (\"C-c C-w\" . elfeed-tube-mpv-where)))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "esxml",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Esxml",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! esxml)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "engrave-faces",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Engrave Faces",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! engrave-faces)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "google-translate",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Google translate",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! google-translate)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(use-package google-translate\n  :commands (google-translate-version)\n  :custom\n  (google-translate-backend-method 'curl)\n  :config\n  (defun google-translate--search-tkk () \"Search TKK.\" (list 430675 2721866130)))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "olivetti",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": [
                            [
                                "",
                                [
                                    "todo"
                                ],
                                []
                            ],
                            "TODO"
                        ],
                        "t": "Code"
                    },
                    {
                        "c": "Â ",
                        "t": "Str"
                    },
                    {
                        "c": "Olivetti",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! olivetti)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(use-package olivetti\n  :init\n  (add-hook! olivetti-mode\n    (if olivetti-mode\n        (progn\n          (remove-hook! lsp-mode #'lsp-ui-mode)\n          (when (bound-and-true-p lsp-mode) (lsp-ui-mode -1)))\n      (add-hook! lsp-mode #'lsp-ui-mode)\n      (when (bound-and-true-p lsp-mode) (lsp-ui-mode +1))))\n\n  :commands #'olivetti-mode\n  :hook (org-mode . olivetti-mode)\n  :config\n  (map! :leader :desc \"Centered mode\" \"t e\" #'olivetti-mode)\n  (map! :map 'olivetti-mode-map\n      \"C-c \\\\\" nil\n      \"C-c |\" nil)\n\n  (setq-default olivetti-body-width 80\n                olivetti-recall-visual-line-mode-entry-state nil)\n\n  (after! persp-mode\n    (defvar persp--olivetti-buffers-backup nil)\n\n    (defun persp--olivetti-deactivate (fow)\n      (dolist (b (mapcar #'window-buffer\n                          (window-list (selected-frame)\n                                      'no-minibuf)))\n        (with-current-buffer b\n          (when (eq 'olivetti-split-window-sensibly\n                    split-window-preferred-function)\n            (push b persp--olivetti-buffers-backup)\n            (setq-local split-window-preferred-function nil)\n            (olivetti-reset-all-windows)))))\n\n    (defun persp--olivetti-activate (fow)\n      (dolist (b persp--olivetti-buffers-backup)\n        (with-current-buffer b\n          (setq-local split-window-preferred-function\n                      'olivetti-split-window-sensibly)))\n      (setq persp--olivetti-buffers-backup nil))\n\n    (add-hook 'persp-before-deactivate-functions #'persp--olivetti-deactivate)\n    (add-hook 'persp-activated-functions #'persp--olivetti-activate)))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "pdf-tools",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "PDF Tools",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(unpin! pdf-tools)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(after! pdf-tools\n  (defvar pdf-scroll-multiplier 2)\n  \n  (defun pdf-tools--scroll-mul (l)\n    (mapcar (lambda (x) (* pdf-scroll-multiplier x)) l))\n  \n  (advice-add 'pdf-view-next-line-or-next-page :filter-args #'pdf-tools--scroll-mul)\n  (advice-add 'pdf-view-previous-line-or-previous-page :filter-args #'pdf-tools--scroll-mul)\n  (advice-add 'image-forward-hscroll :filter-args #'pdf-tools--scroll-mul)\n  (advice-add 'image-backward-hscroll :filter-args #'pdf-tools--scroll-mul)\n  \n  (defun pdf-tools-center-page ()\n    (interactive)\n    (let* ((image (image-get-display-property))\n           (edges (window-inside-edges))\n           (win-width (- (nth 2 edges) (nth 0 edges)))\n           (img-width (ceiling (car (image-display-size image)))))\n      (image-set-window-hscroll (max 0 (/ (- img-width win-width -1) 2)))))\n  \n  (advice-add 'pdf-view-shrink :after (lambda (_) (pdf-tools-center-page)))\n  (advice-add 'pdf-view-enlarge :after (lambda (_) (pdf-tools-center-page)))\n\n  (add-hook! '(doom-load-theme-hook ef-themes-post-load-hook)\n    (setq pdf-view-midnight-colors (cons (face-attribute 'default :foreground) (face-attribute 'default :background)))))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "perps-mode",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Perps-mode",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                {
                    "c": "The following advice disables the annoying, big and ugly messages when auto-saving.",
                    "t": "Str"
                }
            ],
            "t": "Para"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(advice-add 'persp-parameters-to-savelist :around #'advice--inhibit-message)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "real-auto-save",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Real auto-save",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! real-auto-save)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(use-package real-auto-save\n  :after doom-first-file-hook\n  :commands (real-auto-save-mode))\n\n(pushnew! safe-local-variable-values '(real-auto-save-interval . 0.5))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                1,
                [
                    "minor-modes",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Minor modes",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                2,
                [
                    "focus",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Focus",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! focus :type 'local :recipe (:local-repo \"lisp/lib/focus.el\"))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq focus-fraction 0.7)\n;; (custom-set-faces!\n;;   '(focus-unfocused :inherit custom-comment-tag :foreground \"gray\"))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "iedit",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Iedit",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                {
                    "c": "Desativa uma mensagem chata quando apertamos ",
                    "t": "Str"
                },
                {
                    "c": [
                        [
                            "",
                            [
                                ""
                            ],
                            []
                        ],
                        "M-d"
                    ],
                    "t": "Code"
                }
            ],
            "t": "Para"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq iedit-toggle-key-default nil)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                1,
                [
                    "languages",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Languages",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                2,
                [
                    "dart-flutter",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Dart (flutter)",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(setq flutter-sdk-path \"/opt/flutter\")\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "f",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "F#",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq inferior-fsharp-program \"dotnet fsi --readline-\")\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "haskell",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Haskell",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq lsp-haskell-server-path \"haskell-language-server-wrapper\"\n      lsp-haskell-formatting-provider \"fourmolu\"\n      lsp-haskell-plugin-eval-global-on t\n      lsp-haskell-plugin-class-global-on nil\n      lsp-haskell-plugin-ghcide-type-lenses-global-on nil\n      lsp-haskell-plugin-ghcide-completions-config-auto-extend-on nil\n      lsp-haskell-plugin-import-lens-code-lens-on nil\n      lsp-haskell-plugin-import-lens-code-actions-on nil)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                {
                    "c": "Work around bad doom-emacs use of :prelude.",
                    "t": "Str"
                }
            ],
            "t": "Para"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(remove-hook 'haskell-mode-local-vars-hook #'lsp!)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "lisps",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Lisps",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                3,
                [
                    "parinfer",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Parinfer",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(use-package parinfer-rust-mode\n  :when (bound-and-true-p module-file-suffix)\n  :hook (emacs-lisp-mode . parinfer-rust-mode)\n  :init\n  (setq parinfer-rust-library\n        (concat doom-data-dir \"parinfer-rust/\"\n                (cond (IS-MAC \"parinfer-rust-darwin.so\")\n                      (IS-LINUX \"parinfer-rust-linux.so\")\n                      (IS-WINDOWS \"parinfer-rust-windows.dll\")\n                      (IS-BSD \"libparinfer_rust.so\"))))\n  :config\n  (map! :map parinfer-rust-mode-map\n        :localleader\n        \"P\" #'parinfer-rust-switch-mode\n        \"p\" #'parinfer-rust-toggle-disable))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    {
                        "c": [
                            {
                                "c": [
                                    [
                                        "",
                                        [
                                            ""
                                        ],
                                        []
                                    ],
                                    "paren"
                                ],
                                "t": "Code"
                            },
                            {
                                "c": " Mode gives you full control of parens, while Parinfer corrects\nindentation. You can still adjust indentation, but you wonât be able to\nindent/dedent past certain boundaries set by parens on previous lines.",
                                "t": "Str"
                            }
                        ],
                        "t": "Plain"
                    }
                ],
                [
                    {
                        "c": [
                            {
                                "c": [
                                    [
                                        "",
                                        [
                                            ""
                                        ],
                                        []
                                    ],
                                    "indent"
                                ],
                                "t": "Code"
                            },
                            {
                                "c": " Mode gives you full control of indentation, while Parinfer\ncorrects or inserts close-parens where appropriate. Specifically, it only\ntouches the groups of close-parens at the end of each line.",
                                "t": "Str"
                            }
                        ],
                        "t": "Plain"
                    }
                ],
                [
                    {
                        "c": [
                            {
                                "c": [
                                    [
                                        "",
                                        [
                                            ""
                                        ],
                                        []
                                    ],
                                    "smart"
                                ],
                                "t": "Code"
                            },
                            {
                                "c": " Mode is like Indent Mode, but it tries to preserve the structure too.",
                                "t": "Str"
                            }
                        ],
                        "t": "Plain"
                    }
                ]
            ],
            "t": "BulletList"
        },
        {
            "c": [
                {
                    "c": "NOTE TO SELF: ",
                    "t": "Str"
                },
                {
                    "c": [
                        [
                            "",
                            [
                                ""
                            ],
                            []
                        ],
                        "smart"
                    ],
                    "t": "Code"
                },
                {
                    "c": " and ",
                    "t": "Str"
                },
                {
                    "c": [
                        [
                            "",
                            [
                                ""
                            ],
                            []
                        ],
                        "indent"
                    ],
                    "t": "Code"
                },
                {
                    "c": " wonât allow inserting unmached }",
                    "t": "Str"
                }
            ],
            "t": "Para"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq parinfer-rust-preferred-mode \"smart\")\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Hooks",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                {
                                    "c": "I donât want to run it in all lisps, just elisp. Had some issues with ",
                                    "t": "Str"
                                },
                                {
                                    "c": [
                                        [
                                            "",
                                            [
                                                ""
                                            ],
                                            []
                                        ],
                                        "kbd-mode"
                                    ],
                                    "t": "Code"
                                },
                                {
                                    "c": ".",
                                    "t": "Str"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(remove-hook 'lisp-mode-hook #'parinfer-rust-mode)\n(add-hook! 'kbd-mode-hook (parinfer-rust-mode -1))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                3,
                [
                    "kmonad",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "kmonad",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! kbd-mode :recipe (:host github :repo \"kmonad/kbd-mode\"))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(use-package kbd-mode)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "lean",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Lean",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! lean4-mode :recipe\n  (:host github\n   :repo \"leanprover/lean4-mode\"\n   :files (\"*.el\" \"data\")))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(use-package lean4-mode\n  :commands (lean4-mode))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(set-popup-rule! \"^\\\\*Lean Goal\\\\*\"\n  :side 'right\n  :ttl 10\n  :quit 'current\n  :width 50\n  :select nil\n  :modeline nil)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "latex",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "LaTeX",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! latex-preview-pane :disable t)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(after! tex\n  (setq TeX-save-query nil\n        TeX-view-evince-keep-focus t\n        TeX-indent-open-delimiters \"[\"\n        TeX-indent-close-delimiters \"]\"\n        TeX-view-program-selection '((output-pdf \"Zathura\"))\n        TeX-view-program-list\n        '((\"Sioyek-flatpak\"\n           (\"flatpak run --file-forwarding com.github.ahrm.sioyek @@ %o @@\"\n            (mode-io-correlate \" --forward-search-file \\\"%b\\\" --forward-search-line %n --inverse-search \\\"emacsclient -n +%2 %1\\\"\"))))\n\n        font-latex-fontify-script 'multi-level\n        font-latex-fontify-script-max-level 3\n        font-latex-script-display '((raise -0.4) . (raise 0.4)))\n\n  (custom-set-faces!\n    '(font-latex-subscript-face :height 0.8)\n    '(font-latex-superscript-face :height 0.8)))\n\n(add-hook! (LaTeX-mode latex-mode)\n  (display-line-numbers-mode -1)\n  (setq fill-nobreak-predicate nil\n        fill-column 9999999999))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "do-not-auto-fill-my-text-when-i-wrap-it-inside-an-environment",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Do not auto fill my text when I wrap it inside an environment",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(defadvice! latex-environment-do-not-justify (f &rest r)\n  :around 'LaTeX-environment\n  (let ((auto-fill-function nil))\n    (apply f r)))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "org",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Org",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                3,
                [
                    "installation-4",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Installation",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(unpin! org)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "variaveis",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "VariÃ¡veis",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(setq org-directory \"~/dados/org\"\n      org-attach-id-dir \"data/\"\n      org-fold-core-style 'overlays\n      org-startup-folded nil\n      org-startup-indented t\n      org-support-shift-select t\n      org-hide-emphasis-markers nil\n      org-src-window-setup 'plain\n      org-highlight-latex-and-related '(latex script)\n      org-emphasis-regexp-components '(\"-[:space:]('\\\"{\" \"-[:space:].,:!?;'\\\")}\\\\[\" \"{}*[:space:]\" \".\" 1)\n      org-indent-indentation-per-level 2)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(after! org-src\n  (pushnew! org-src-lang-modes\n            '(\"html\" . web)\n            '(\"lean4\" . lean4)))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "attach-download",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Attach & Download",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                {
                    "c": "We can make ",
                    "t": "Str"
                },
                {
                    "c": [
                        [
                            "",
                            [
                                ""
                            ],
                            []
                        ],
                        "org-attach"
                    ],
                    "t": "Code"
                },
                {
                    "c": " work before the first headline:",
                    "t": "Str"
                }
            ],
            "t": "Para"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(after! org-attach\n  (setq org-attach-auto-tag nil\n        org-attach-id-to-path-function-list\n        '(org-attach-id-ts-folder-format org-attach-id-uuid-folder-format identity)))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(after! org-download\n  (setq org-download-image-org-width 300))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Org-attach-extra",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "elisp"
                                    ],
                                    []
                                ],
                                "(add-load-path! \"/home/lucas/.doom.d/lisp/lib/org-attach-extra/\")\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(use-package org-attach-extra\n  :after org)\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                3,
                [
                    "appearance",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Appearance",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Font lock",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    1,
                                    {
                                        "t": "Decimal"
                                    },
                                    {
                                        "t": "Period"
                                    }
                                ],
                                [
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Hide fragment delimiters",
                                                            "t": "Str"
                                                        },
                                                        {
                                                            "c": "Â ",
                                                            "t": "Str"
                                                        },
                                                        {
                                                            "c": [
                                                                [
                                                                    "",
                                                                    [
                                                                        "tag"
                                                                    ],
                                                                    []
                                                                ],
                                                                [
                                                                    {
                                                                        "c": "monkey",
                                                                        "t": "Str"
                                                                    }
                                                                ]
                                                            ],
                                                            "t": "Span"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "emacs-lisp"
                                                    ],
                                                    []
                                                ],
                                                "(defadvice! my-org-do-latex-and-related (limit)\n  \"Highlight LaTeX snippets and environments, entities and sub/superscript.\nStop at first highlighted object, if any.  Return t if some\nhighlighting was done, nil otherwise.\"\n  :override #'org-do-latex-and-related\n  (when (org-string-nw-p org-latex-and-related-regexp)\n    (let ((latex-prefix-re (rx (or \"$\" \"\\\\(\" \"\\\\[\")))\n          (blank-line-re (rx (and \"\\n\" (zero-or-more (or \" \" \"\\t\")) \"\\n\"))))\n      (catch 'found\n       (while (and (< (point) limit)\n               (re-search-forward org-latex-and-related-regexp nil t))\n         (cond\n              ((>= (match-beginning 0) limit)\n               (throw 'found nil))\n          ((cl-some (lambda (f)\n                     (memq f '(org-code org-verbatim underline\n                               org-special-keyword)))\n                (save-excursion\n                  (goto-char (1+ (match-beginning 0)))\n                  (face-at-point nil t))))\n          ;; Try to limit false positives.  In this case, ignore\n          ;; $$...$$, \\(...\\), and \\[...\\] LaTeX constructs if they\n          ;; contain an empty line.\n          ((save-excursion\n             (goto-char (match-beginning 0))\n             (and (looking-at-p latex-prefix-re)\n                  (save-match-data\n                    (re-search-forward blank-line-re (1- (match-end 0)) t)))))\n          (t\n           (let* ((offset (if (memq (char-after (1+ (match-beginning 0)))\n                                    '(?_ ?^))\n                              1\n                            0))\n                  (start (+ offset (match-beginning 0)))\n                  (end (match-end 0)))\n             (if (memq 'native org-highlight-latex-and-related)\n                 (org-src-font-lock-fontify-block \"latex\" start end)\n               (font-lock-prepend-text-property start end\n                                                'face 'org-latex-and-related))\n             ;; my code starts here\n             (when (and org-hide-emphasis-markers (< (+ start 4) end))\n               (cond ((member (buffer-substring start (+ start 2)) '(\"$$\" \"\\\\(\"))\n                      (add-text-properties start (+ start 2) '(invisible org-link)))\n                     ((string= (buffer-substring (1+ start) (+ start 2)) \"$\")\n                      (add-text-properties (1+ start) (+ start 2) '(invisible org-link))))\n               (cond ((member (buffer-substring end (- end 2)) '(\"$$\" \"\\\\)\"))\n                      (add-text-properties end (- end 2) '(invisible org-link)))\n                     ((string= (buffer-substring (1- end) (- end 2)) \"$\")\n                      (add-text-properties (1- end) (- end 2) '(invisible org-link)))))\n             ;; my code ends here\n             (add-text-properties (+ offset (match-beginning 0)) (match-end 0)\n                                  '(font-lock-multiline t))\n             (throw 'found t)))))\n       nil))))\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ],
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Fragment fontification without ",
                                                            "t": "Str"
                                                        },
                                                        {
                                                            "c": [
                                                                [
                                                                    "",
                                                                    [
                                                                        ""
                                                                    ],
                                                                    []
                                                                ],
                                                                "org-block"
                                                            ],
                                                            "t": "Code"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                {
                                                    "c": "Org reuses the ",
                                                    "t": "Str"
                                                },
                                                {
                                                    "c": [
                                                        [
                                                            "",
                                                            [
                                                                ""
                                                            ],
                                                            []
                                                        ],
                                                        "org-src-font-lock-fontify-block"
                                                    ],
                                                    "t": "Code"
                                                },
                                                {
                                                    "c": " function to fontify LaTeX fragments natively. But this function adds the very inappropiate face ",
                                                    "t": "Str"
                                                },
                                                {
                                                    "c": [
                                                        [
                                                            "",
                                                            [
                                                                ""
                                                            ],
                                                            []
                                                        ],
                                                        "org-block"
                                                    ],
                                                    "t": "Code"
                                                },
                                                {
                                                    "c": " to everything. Letâs remove it when the native block is one of our fragments.",
                                                    "t": "Str"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "emacs-lisp"
                                                    ],
                                                    []
                                                ],
                                                "(defvar org--font-locking-latex-fragment nil)\n\n(undefadvice! signal-font-locking-latex (orig-fun &rest args)\n  :around #'org-do-latex-and-related\n  (let ((org--font-locking-latex-fragment t))\n    (apply orig-fun args)))\n\n(undefadvice! do-not-org-block-my-latex-advice (_ start end)\n  :after #'org-src-font-lock-fontify-block\n  (when org--font-locking-latex-fragment\n    (alter-text-property start end 'face (lambda (l) (remove 'org-block l)))))\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ],
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Better alignment for ",
                                                            "t": "Str"
                                                        },
                                                        {
                                                            "c": [
                                                                [
                                                                    "",
                                                                    [
                                                                        ""
                                                                    ],
                                                                    []
                                                                ],
                                                                "mixed-pitch"
                                                            ],
                                                            "t": "Code"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "row"
                                                    ],
                                                    []
                                                ],
                                                [
                                                    {
                                                        "c": [
                                                            [
                                                                "",
                                                                [
                                                                    ""
                                                                ],
                                                                []
                                                            ],
                                                            [
                                                                null,
                                                                [
                                                                    {
                                                                        "c": [
                                                                            {
                                                                                "c": "Before",
                                                                                "t": "Str"
                                                                            }
                                                                        ],
                                                                        "t": "Plain"
                                                                    }
                                                                ]
                                                            ],
                                                            [
                                                                {
                                                                    "c": [
                                                                        {
                                                                            "c": [
                                                                                [
                                                                                    "",
                                                                                    [
                                                                                        ""
                                                                                    ],
                                                                                    []
                                                                                ],
                                                                                [
                                                                                    {
                                                                                        "c": "Before",
                                                                                        "t": "Str"
                                                                                    }
                                                                                ],
                                                                                [
                                                                                    "attachment:Captura de tela de 2022-04-21 12-12-49.png",
                                                                                    ""
                                                                                ]
                                                                            ],
                                                                            "t": "Image"
                                                                        }
                                                                    ],
                                                                    "t": "Plain"
                                                                }
                                                            ]
                                                        ],
                                                        "t": "Figure"
                                                    },
                                                    {
                                                        "c": [
                                                            [
                                                                "",
                                                                [
                                                                    ""
                                                                ],
                                                                []
                                                            ],
                                                            [
                                                                null,
                                                                [
                                                                    {
                                                                        "c": [
                                                                            {
                                                                                "c": "After",
                                                                                "t": "Str"
                                                                            }
                                                                        ],
                                                                        "t": "Plain"
                                                                    }
                                                                ]
                                                            ],
                                                            [
                                                                {
                                                                    "c": [
                                                                        {
                                                                            "c": [
                                                                                [
                                                                                    "",
                                                                                    [
                                                                                        ""
                                                                                    ],
                                                                                    []
                                                                                ],
                                                                                [
                                                                                    {
                                                                                        "c": "After",
                                                                                        "t": "Str"
                                                                                    }
                                                                                ],
                                                                                [
                                                                                    "attachment:Captura de tela de 2022-04-21 12-13-01.png",
                                                                                    ""
                                                                                ]
                                                                            ],
                                                                            "t": "Image"
                                                                        }
                                                                    ],
                                                                    "t": "Plain"
                                                                }
                                                            ]
                                                        ],
                                                        "t": "Figure"
                                                    }
                                                ]
                                            ],
                                            "t": "Div"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "emacs-lisp"
                                                    ],
                                                    []
                                                ],
                                                "(defun org-add-indent-face-to-prespace ()\n  (setq\n   org-font-lock-extra-keywords\n   (append (delete\n            '(\"^ *\\\\([-+]\\\\|\\\\(?:[0-9]+\\\\|[a-zA-Z]\\\\)[).]\\\\)[ \\t]\" 1 'org-list-dt append)\n            org-font-lock-extra-keywords)\n           ;; Add org-indent face to all spaces at line starts\n           '((\"^\\\\( +\\\\)\"\n              (1 'org-indent append))\n             ;; Also fontify * bullets\n             (\"^ +\\\\(\\\\*\\\\)\\\\([ \\t]\\\\)\"\n              (1 'org-list-dt append)\n              (2 'org-indent append))\n             ;; This is modified from user @psii\n             ;; https://github.com/doomemacs/themes/pull/716\n             (\"^ *\\\\([-+]\\\\|\\\\(?:[0-9]+\\\\|[a-zA-Z]\\\\)[).]\\\\)\\\\([ \\t]\\\\)\"\n                           (1 'org-list-dt append)\n                           (2 'org-indent append))))))\n\n(add-hook 'org-font-lock-set-keywords-hook #'org-add-indent-face-to-prespace)\n"
                                            ],
                                            "t": "CodeBlock"
                                        },
                                        {
                                            "c": [
                                                {
                                                    "c": "We can also make list bullets fixed-pitch, so they are even more aligned.",
                                                    "t": "Str"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "emacs-lisp"
                                                    ],
                                                    []
                                                ],
                                                "(after! mixed-pitch\n  (add-to-list 'mixed-pitch-fixed-pitch-faces 'org-list-dt))\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ],
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Fontify counter cookies",
                                                            "t": "Str"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "emacs-lisp"
                                                    ],
                                                    []
                                                ],
                                                "(defun org-fontify-counter-cookies ()\n  (setq\n   org-font-lock-extra-keywords\n   (append org-font-lock-extra-keywords\n           '((\"^[ \\t]*\\\\(?:[-+*]\\\\|\\\\(?:[0-9]+\\\\|[a-zA-Z]\\\\)[.)]\\\\)[ \\t]+\\\\(\\\\[@\\\\(?:start:\\\\)?\\\\(?:[0-9]+\\\\|[a-zA-Z]\\\\)\\\\]\\\\)\"\n              (1 'org-property-value prepend))))))\n\n(add-hook 'org-font-lock-set-keywords-hook #'org-fontify-counter-cookies)\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ]
                                ]
                            ],
                            "t": "OrderedList"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Faces",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(custom-set-faces!\n  '(font-latex-math-face :foreground unspecified)\n  '(org-indent :inherit org-hide)\n  '(org-headline-done :foreground unspecified)\n  '(org-verse :inherit nil)\n  '(font-latex-sedate-face :inherit nil))\n\n(custom-set-faces!\n  '(org-link :weight normal))\n(custom-set-faces!\n  `(outline-1 :weight bold :inherit nil)\n  `(outline-2 :weight bold :inherit nil)\n  `(outline-3 :weight bold :inherit nil)\n  `(outline-4 :weight bold :inherit nil)\n  `(outline-5 :weight bold :inherit nil)\n  '(outline-6 :weight bold :inherit nil)\n  '(outline-8 :weight bold :inherit nil)\n  '(outline-9 :weight bold :inherit nil))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                3,
                [
                    "bindings",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Bindings",
                        "t": "Str"
                    },
                    {
                        "c": "Â ",
                        "t": "Str"
                    },
                    {
                        "c": [
                            [
                                "",
                                [
                                    "tag"
                                ],
                                []
                            ],
                            [
                                {
                                    "c": "bindings",
                                    "t": "Str"
                                }
                            ]
                        ],
                        "t": "Span"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(map! :mode 'org-mode\n      :g \"C-S-s\" (cmd! (org-latex-export-to-pdf nil))\n      :i \"C-i\" (cmd! (org-emphasize ?/))\n      :i \"C-b\" (cmd! (org-emphasize ?*))\n      :n \"\\\\\" #'org-edit-special\n      :localleader \"s p\" #'org-paste-subtree)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Better emphasis toggle",
                                            "t": "Str"
                                        },
                                        {
                                            "c": "Â ",
                                            "t": "Str"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "tag"
                                                    ],
                                                    []
                                                ],
                                                [
                                                    {
                                                        "c": "advice",
                                                        "t": "Str"
                                                    }
                                                ]
                                            ],
                                            "t": "Span"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                {
                                    "c": "If the point is before the emphasis marker, then ",
                                    "t": "Str"
                                },
                                {
                                    "c": [
                                        [
                                            "",
                                            [
                                                ""
                                            ],
                                            []
                                        ],
                                        "org-emphasize"
                                    ],
                                    "t": "Code"
                                },
                                {
                                    "c": " should exit it.",
                                    "t": "Str"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(defadvice! org-emphasize-emph-exit-ad (char)\n  :before-until #'org-emphasize\n  (when (eq (char-after) char)\n    (forward-char)\n    t))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        ""
                                                    ],
                                                    []
                                                ],
                                                "SPC s I"
                                            ],
                                            "t": "Code"
                                        },
                                        {
                                            "c": " to open subtree with narrowing",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(map! :mode 'org-mode\n      :map 'doom-leader-search-map\n      \"I\" (cmd!\n           (let ((this-buffer (current-buffer))\n                 (pos (point)))\n             (consult-imenu)\n             (org-tree-to-indirect-buffer)\n             (setq indirect-buffer (current-buffer))\n             ;; with-current-buffer does not save pos for some reason\n             (switch-to-buffer this-buffer)\n             (goto-char pos)\n             (evil-scroll-line-to-center nil)\n             (switch-to-buffer indirect-buffer))))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                3,
                [
                    "general-config",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "General config",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(add-hook! org-mode\n    <<org-mode-hook>>\n    nil)\n\n(set-popup-rule! \"\\*Org Src .+\\*\"\n  :size 0.5)\n\n(after! org\n  (require 'org-src))\n  ;; (add-to-list 'org-src-block-faces '(\"latex\" (:inherit default :extend t)))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "linking",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Linking",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq +org-roam-link-to-org-use-id 'use-existing\n      org-id-link-to-org-use-id 'use-existing)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "logging",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Logging",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq org-log-states-order-reversed t\n      org-log-done 'note\n      org-log-into-drawer t)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "minor",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Minor",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Org-appear",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "elisp"
                                    ],
                                    []
                                ],
                                "(package! org-appear)\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(use-package org-appear\n  :after org\n  :init\n  (defun org-appear-toggle ()\n    (interactive)\n    (if org-appear-mode\n        (progn (setq org-hide-emphasis-markers nil)\n               (org-restart-font-lock)\n               (org-appear-mode -1))\n      (setq org-hide-emphasis-markers t)\n      (org-restart-font-lock)\n      (org-appear-mode 1)))\n  :config\n  (setq org-appear-autolinks nil\n        org-appear-inside-latex t\n        org-appear-autosubmarkers t)\n  (map! :mode 'org-mode :leader \"t a\" #'org-appear-toggle))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Org-noter",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(setq org-noter-notes-search-path (list (expand-file-name \"org-noter\" org-roam-directory)))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Org-remark",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "elisp"
                                    ],
                                    []
                                ],
                                "(package! org-remark)\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(use-package org-remark\n  :after org\n  :config)\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Org-roam-timestamps",
                                            "t": "Str"
                                        },
                                        {
                                            "c": "Â ",
                                            "t": "Str"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "tag"
                                                    ],
                                                    []
                                                ],
                                                [
                                                    {
                                                        "c": "ARCHIVE",
                                                        "t": "Str"
                                                    }
                                                ]
                                            ],
                                            "t": "Span"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "elisp"
                                    ],
                                    []
                                ],
                                "(package! org-roam-timestamps\n  :recipe (:host github :repo \"stites/org-roam-timestamps\")\n  :pin \"fbbe57a7d6283624e567bd1ee46ebea3d179a321\")\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(use-package! org-roam-timestamps\n  :after org-roam\n  :config (org-roam-timestamps-mode))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Org-superstar",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "elisp"
                                    ],
                                    []
                                ],
                                "(package! org-superstar)\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(use-package org-superstar\n  :after (org)\n  :hook (org-mode . org-superstar-mode)\n  :config\n  (setq org-superstar-headline-bullets-list '(?â ?â ?ð± ?ð½ ?âº)))\n        ;; org-superstar-headline-bullets-list '(\"ð\" \"ð\" \"ð\" \"ð\" \"ð\" \"ð\" \"ð\" \"ð\")))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Org-transclusion",
                                            "t": "Str"
                                        },
                                        {
                                            "c": "Â ",
                                            "t": "Str"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "tag"
                                                    ],
                                                    []
                                                ],
                                                [
                                                    {
                                                        "c": "monkey",
                                                        "t": "Str"
                                                    }
                                                ]
                                            ],
                                            "t": "Span"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "elisp"
                                    ],
                                    []
                                ],
                                "(package! org-transclusion)\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(use-package! org-transclusion\n  :after org\n  :init\n  (map!\n   :map global-map \"<f12>\" #'org-transclusion-add\n   :leader\n   :prefix \"n\"\n   :desc \"Org Transclusion Mode\" \"t\" #'org-transclusion-mode)\n  (setq org-transclusion-exclude-elements '(property-drawer keyword)))\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(after! org\n  (defadvice! +org--recenter-after-follow-link-a (&rest _args)\n    \"Recenter after following a link, but only internal or file links.\"\n    :after '(org-footnote-action\n             org-follow-timestamp-link\n             org-link-open-as-file\n             org-link-search)\n    (if-let* ((window (get-buffer-window)))\n        (with-selected-window window\n          (recenter)))))\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(defun org-transclusion-add-better-id (link plist)\n  \"Return a list for Org-ID LINK object and PLIST.\nReturn nil if not found.\"\n  (when (string= \"id\" (org-element-property :type link))\n    ;; when type is id, the value of path is the id\n    (let* ((both (split-string (org-element-property :path link) \"::\"))\n           (id (cl-first both))\n           (search (cl-second both))\n           (mkr (ignore-errors (org-id-find id t)))\n           (payload '(:tc-type \"org-id\")))\n      (if mkr\n          (append payload (org-transclusion-content-better-marker mkr search plist))\n        (message\n         (format \"No transclusion done for this ID. Ensure it works at point %d, line %d\"\n                 (point) (org-current-line)))\n        nil))))\n\n(defun org-transclusion-content-better-marker (marker search plist)\n  \"Return a list of payload from MARKER and PLIST.\nThis function is intended to be used for Org-ID.  It delates the\nwork to\n`org-transclusion-content-org-buffer-or-element'.\"\n  (if (and marker (marker-buffer marker)\n           (buffer-live-p (marker-buffer marker)))\n      (progn\n        (with-current-buffer (marker-buffer marker)\n          (org-with-wide-buffer\n           (goto-char marker)\n           (when search\n             (org-link-search search))\n           (if (and (not search) (org-before-first-heading-p))\n               (org-transclusion-content-org-buffer-or-element\n                nil plist)\n             (org-transclusion-content-org-buffer-or-element\n              'only-element plist)))))\n    (message \"Nothing done. Cannot find marker for the ID.\")))\n\n(defun org-transclusion-add-org-attach (link plist)\n  \"Return a list for attached file LINK object and PLIST.\nReturn nil if not found.\"\n  (when (string= \"attachment\" (org-element-property :type link))\n    (let* ((both (split-string (org-element-property :path link) \"::\"))\n           (path (org-attach-expand (cl-first both)))\n           (search (cl-second both))\n           (link_ (org-element-put-property link :path path))\n           (link__ (org-element-put-property link_ :search-string search)))\n      (or (org-transclusion-add-org-file link__ plist)\n          (org-transclusion-add-other-file link__ plist)))))\n\n(after! org-transclusion\n  ;; (defadvice! org-transclusion-no-fringe ()\n  ;;   :override #'org-transclusion-propertize-source\n  ;;   nil)\n  (setq! org-transclusion-add-functions\n        '(org-transclusion-add-src-lines\n          org-transclusion-add-better-id\n          org-transclusion-add-org-attach\n          org-transclusion-add-org-file\n          org-transclusion-add-other-file)))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                3,
                [
                    "gutter",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Gutter",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                {
                    "c": "O ",
                    "t": "Str"
                },
                {
                    "c": [
                        [
                            "",
                            [
                                ""
                            ],
                            []
                        ],
                        "git-gutter"
                    ],
                    "t": "Code"
                },
                {
                    "c": " nÃ£o funciona bem com o ",
                    "t": "Str"
                },
                {
                    "c": [
                        [
                            "",
                            [
                                ""
                            ],
                            []
                        ],
                        "org-indent-mode"
                    ],
                    "t": "Code"
                },
                {
                    "c": ":",
                    "t": "Str"
                }
            ],
            "t": "Para"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(push 'org-mode git-gutter:disabled-modes)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "hook",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Hook",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq-local auto-save-visited-interval 0.2\n            display-line-numbers nil)\n(setq line-spacing 5)\n(add-to-list 'completion-at-point-functions #'cape-dabbrev)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "organon",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Organon",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(define-minor-mode organon-follow-mode\n  \"Set whether organon should follow your every move in Emacs.\"\n  :lighter \" organon\"\n  :global t\n  :group 'organon\n  :init-value nil\n  (if organon-follow-mode\n      (progn\n        (add-hook 'post-command-hook #'organon--update-position)\n        (message \"organon will now follow you around.\"))\n    (remove-hook 'post-command-hook #'organon--update-position)\n    (message \"organon will now leave you alone.\")))\n\n(defvar organon--last-pos nil)\n(defvar organon--conn nil)\n\n(defun organon--connect ()\n  (require 'websocket)\n  (unless organon--conn\n    (websocket-open\n     \"ws://127.0.0.1:9160\"\n     :on-open (lambda (ws) (message \"organon: connected\") (setq organon--conn ws))\n     :on-close (lambda (ws) (message \"organon: disconnected\") (setq organon--conn nil)))))\n\n(defun organon--get-info ()\n  (list :id (org-entry-get nil \"ID\" t)\n        :file (buffer-file-name)\n        :anchor (or (org-entry-get nil \"CUSTOM_ID\")\n                    (condition-case nil\n                        (concat \"h-\" (nth 4 (org-heading-components)))\n                      (user-error nil)))))\n\n(defun organon--update-position ()\n  (when-let ((_ (eq major-mode 'org-mode))\n             (cur-pos (organon--get-info))\n             (_ (not (equal cur-pos organon--last-pos))))\n    (setq organon--last-pos cur-pos)\n    (send-to-organon)))\n\n(defun send-to-organon ()\n  (interactive)\n  (organon--connect)\n  (when organon--conn\n    (let ((cur-info (organon--get-info)))\n      (websocket-send-text organon--conn (json-encode cur-info)))))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "exporting",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Exporting",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(after! ox\n  (add-to-list\n   'org-export-smart-quotes-alist\n   '(\"pt-br\"\n     (primary-opening :utf-8 \"â\" :html \"&ldquo;\" :latex \"``\" :texinfo \"``\")\n     (primary-closing :utf-8 \"â\" :html \"&rdquo;\" :latex \"''\" :texinfo \"''\")\n     (secondary-opening :utf-8 \"â\" :html \"&lsquo;\" :latex \"`\" :texinfo \"`\")\n     (secondary-closing :utf-8 \"â\" :html \"&rsquo;\" :latex \"'\" :texinfo \"'\")\n     (apostrophe :utf-8 \"â\" :html \"&rsquo;\"))))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "LaTeX",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "elisp"
                                    ],
                                    []
                                ],
                                "(after! org\n  ;; Note to self: NEVER change this!!! You have had problems with uncompilable documents when you changed the default preamble in the past!!\n  (setq org-latex-packages-alist nil\n        org-latex-preview-default-process 'dvisvgm)\n\n  (after! ox-latex\n    (setq org-latex-pdf-process '(\"latexmk -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f\")\n          org-latex-compilers '(\"tectonic\" \"pdflatex\" \"xelatex\" \"lualatex\")\n          org-latex-compiler \"xelatex\"))\n\n  (custom-reevaluate-setting 'org-latex-preview-process-alist)\n\n  ;; To avoid issues with pdfcrop\n  (plist-put! org-format-latex-options\n              :background \"Transparent\"\n              :scale 2.0))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                3,
                [
                    "org-roam",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Org-roam",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Variables",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    1,
                                    {
                                        "t": "Decimal"
                                    },
                                    {
                                        "t": "Period"
                                    }
                                ],
                                [
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Common",
                                                            "t": "Str"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                {
                                                    "c": "Shared with desktop and termux.",
                                                    "t": "Str"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "emacs-lisp"
                                                    ],
                                                    []
                                                ],
                                                "(after! org-roam\n  (setq org-id-method 'ts\n        org-roam-completion-everywhere nil))\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ],
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Desktop-specific",
                                                            "t": "Str"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                {
                                                    "c": "Those arenât shared with termux.",
                                                    "t": "Str"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "emacs-lisp"
                                                    ],
                                                    []
                                                ],
                                                "(after! org-roam\n  (setq org-roam-directory \"~/dados/notas\"\n        org-roam-node-display-template\n        #(\"${doom-hierarchy} ${doom-type} ${doom-tags}\" 18 30\n          (face font-lock-comment-face)\n          31 43\n          (face font-lock-comment-face))))\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ]
                                ]
                            ],
                            "t": "OrderedList"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Protocol",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(after! org-roam\n  (require 'org-roam-protocol))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Switch workspace",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(defadvice! yeet/org-roam-in-own-workspace-a (&rest _)\n  \"Open all roam buffers in their own workspace.\"\n  :before #'org-roam-node-find\n  :before #'org-roam-node-random\n  :before #'org-roam-buffer-display-dedicated\n  :before #'org-roam-buffer-toggle\n  (when (modulep! :ui workspaces)\n    (+workspace-switch \"notas\" t))\n  (when (functionp 'tabspaces-switch-or-create-workspace)\n    (tabspaces-switch-or-create-workspace \"notas\")))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Capture Templates",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    1,
                                    {
                                        "t": "Decimal"
                                    },
                                    {
                                        "t": "Period"
                                    }
                                ],
                                [
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Roam",
                                                            "t": "Str"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "emacs-lisp"
                                                    ],
                                                    []
                                                ],
                                                "(after! org-roam\n  (setq org-roam-capture-templates\n        '((\"d\" \"default\" plain \"%?\"\n           :target (file+head \"%<%Y%m%d%H%M%S>.org\" \"#+title: ${title}\n#+language: pt\n\")\n           :unnarrowed t)\n          (\"m\" \"math\" plain \"%?\"\n           :target (file+head \"math/%<%Y%m%d%H%M%S>.org\" \"#+title: ${title}\n#+language: pt\n\")\n           :unnarrowed t))))\n          \n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ],
                                    [
                                        {
                                            "c": [
                                                {
                                                    "c": [
                                                        {
                                                            "c": "Roam-ref",
                                                            "t": "Str"
                                                        }
                                                    ],
                                                    "t": "Strong"
                                                }
                                            ],
                                            "t": "Para"
                                        },
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        "emacs-lisp"
                                                    ],
                                                    []
                                                ],
                                                "(setq org-roam-capture-ref-templates\n      '((\"m\" \"math\" plain \"%?\"\n           :target (file+head \"math/%<%Y%m%d%H%M%S>.org\" \"#+title: ${title}\\n\\n${body}\")\n           :unnarrowed t)\n        (\"fr\" \"Add to my future-read list\" entry \"* ${title}\\n%?\"\n         :target (file+olp \"to-read.org\" (\"${title}\"))\n         :empty-lines-before 1 nil nil)\n        (\"r\" \"ref\" plain \"%?\" :target\n         (file+head \"${slug}.org\" \"#+title: ${title}\")\n         :unnarrowed t)))\n"
                                            ],
                                            "t": "CodeBlock"
                                        }
                                    ]
                                ]
                            ],
                            "t": "OrderedList"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Workarounds",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(defadvice! inhibit-redisplay-on-roam-autosync (fn)\n  \"Inhibit redisplay when syncing roam database on saves.\"\n  :around #'org-roam-db-autosync--try-update-on-save-h\n  (let ((inhibit-redisplay t)) (funcall fn)))\n"
                            ],
                            "t": "CodeBlock"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(defadvice! org-roam-db-insert-link--remove-search-a (f link)\n  :around #'org-roam-db-insert-link\n  (let ((newpath (car (split-string (org-element-property :path link) \"::\"))))\n    (funcall f (org-element-put-property link :path newpath))))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ],
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": [
                                                [
                                                    "",
                                                    [
                                                        ""
                                                    ],
                                                    []
                                                ],
                                                "md-roam"
                                            ],
                                            "t": "Code"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "elisp"
                                    ],
                                    []
                                ],
                                "(package! md-roam :recipe (:host github :repo \"nobiot/md-roam\"))\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                3,
                [
                    "org-roam-ui",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Org-roam-ui",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(unpin! org-roam)\n(package! org-roam-ui)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(use-package! websocket\n    :after org-roam-ui)\n\n(use-package! org-roam-ui\n  :after org-roam\n  :commands (org-roam-ui-mode)\n  :config\n  (setq org-roam-ui-sync-theme t\n        org-roam-ui-follow t\n        org-roam-ui-update-on-save t))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "org-protocol",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Org-protocol",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(after! org-protocol\n  (add-to-list 'org-protocol-protocol-alist\n               '(\"org-file\" :protocol \"org-file\"\n                 :function org-protocol-goto-org-file)))\n\n(defun org-protocol-goto-org-file (info)\n  (if-let ((id (plist-get info :id)))\n      (org-id-goto id)\n    (when-let ((file (plist-get info :file)))\n      (org-open-file file)))\n  nil)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    1,
                    {
                        "t": "Decimal"
                    },
                    {
                        "t": "Period"
                    }
                ],
                [
                    [
                        {
                            "c": [
                                {
                                    "c": [
                                        {
                                            "c": "Raise frame",
                                            "t": "Str"
                                        }
                                    ],
                                    "t": "Strong"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                {
                                    "c": "Requires ",
                                    "t": "Str"
                                },
                                {
                                    "c": [
                                        [
                                            "",
                                            [
                                                ""
                                            ],
                                            []
                                        ],
                                        [
                                            {
                                                "c": "this extension",
                                                "t": "Str"
                                            }
                                        ],
                                        [
                                            "https://extensions.gnome.org/extension/4724/window-calls/",
                                            ""
                                        ]
                                    ],
                                    "t": "Link"
                                },
                                {
                                    "c": " to be installed.",
                                    "t": "Str"
                                }
                            ],
                            "t": "Para"
                        },
                        {
                            "c": [
                                [
                                    "",
                                    [
                                        "emacs-lisp"
                                    ],
                                    []
                                ],
                                "(defun org-protocol/select-current-frame ()\n  ;; gnome stuff\n  ;;             (shell-command-to-string\n  ;;              (format \"gdbus call \\\n  ;;                         --session \\\n  ;;                         --dest org.gnome.Shell \\\n  ;;                         --object-path /org/gnome/Shell/Extensions/Windows \\\n  ;;                         --method org.gnome.Shell.Extensions.Windows.List \\\n  ;;                       | cut -c 3- | rev | cut -c4- | rev \\\n  ;;                       | jq '.[] | select(.pid == %s) .id'\" (emacs-pid))))))\n  ;;   (dbus-call-method\n  ;;    :session\n  ;;    \"org.gnome.Shell\"\n  ;;    \"/org/gnome/Shell/Extensions/Windows\"\n  ;;    \"org.gnome.Shell.Extensions.Windows\"\n  ;;    \"Activate\"\n  ;;    wid))\n  ;; this should be compatible with other WMs\n  (select-frame-set-input-focus (selected-frame)))\n(add-hook 'org-capture-mode-hook 'org-protocol/select-current-frame)\n"
                            ],
                            "t": "CodeBlock"
                        }
                    ]
                ]
            ],
            "t": "OrderedList"
        },
        {
            "c": [
                3,
                [
                    "unfill-instead-of-fill",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Unfill instead of fill",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                {
                    "c": "With time, I came to the conclusion that having no line breaks inside paragraphs works better in most Org documents. So instead of ",
                    "t": "Str"
                },
                {
                    "c": [
                        [
                            "",
                            [
                                ""
                            ],
                            []
                        ],
                        "org-fill-paragraph"
                    ],
                    "t": "Code"
                },
                {
                    "c": ", Iâll bind ",
                    "t": "Str"
                },
                {
                    "c": [
                        [
                            "",
                            [
                                ""
                            ],
                            []
                        ],
                        "M-q"
                    ],
                    "t": "Code"
                },
                {
                    "c": " to some sort of ",
                    "t": "Str"
                },
                {
                    "c": [
                        {
                            "t": "DoubleQuote"
                        },
                        [
                            {
                                "c": [
                                    [
                                        "",
                                        [
                                            ""
                                        ],
                                        []
                                    ],
                                    "org-unfill-paragraph"
                                ],
                                "t": "Code"
                            }
                        ]
                    ],
                    "t": "Quoted"
                },
                {
                    "c": ".",
                    "t": "Str"
                }
            ],
            "t": "Para"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(defun org-unfill-paragraph ()\n  (interactive)\n  (let ((fill-column most-positive-fixnum))\n    (org-fill-paragraph)))\n \n(map! :map 'org-mode-map \"M-q\" #'org-unfill-paragraph)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "vulpea",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Vulpea",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! vulpea)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(use-package! vulpea\n  :hook ((org-roam-db-autosync-mode . vulpea-db-autosync-enable)))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "writing-mode",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Writing mode",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(defvar-local org-writing-mode--previous-mixed-pitch nil)\n(defvar-local org-writing-mode--previous-line-numbers nil)\n(defvar-local org-writing-mode--previous-line-spacing 0)\n(defvar-local org-writing-mode--frame nil)\n\n(define-minor-mode org-writing-mode\n  \"Minor mode for writing in org.\"\n  :init-value nil\n  :lighter nil\n  (require 'mixed-pitch)\n  (unless (frame-live-p org-writing-mode--frame)\n    (setq-local org-writing-mode--frame (selected-frame)))\n  (if org-writing-mode\n      (progn (setq-local\n              org-writing-mode--previous-mixed-pitch mixed-pitch-mode\n              org-writing-mode--previous-line-numbers display-line-numbers\n              org-writing-mode--previous-line-spacing line-spacing\n              display-line-numbers nil\n              line-spacing 5)\n             (mixed-pitch-mode +1)\n             ;; (set-frame-parameter org-writing-mode--frame 'internal-border-width 30)\n             (evil-normal-state))\n    (mixed-pitch-mode (if org-writing-mode--previous-mixed-pitch 1 -1))\n    ;; (set-frame-parameter org-writing-mode--frame 'internal-border-width 0)\n    (setq display-line-numbers org-writing-mode--previous-line-numbers\n          line-spacing org-writing-mode--previous-line-spacing)))\n\n(map! :mode 'org-mode :leader \"t z\" #'org-writing-mode)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "web",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Web",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq-default web-mode-code-indent-offset 2\n              web-mode-markup-indent-offset 2)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "yuck-mode",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Yuck mode",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! yuck-mode)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                1,
                [
                    "scientific-writing-mostly-mathematics",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Scientific writing (mostly mathematics)",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                2,
                [
                    "mamimo",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Mamimo",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(package! mamimo\n  :type 'local\n  :recipe (:local-repo \"lisp/lib/mamimo\"\n           :files (\"*.el\" \"snippets\")))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(use-package mamimo\n  :commands (mamimo-mode\n             mamimo-yas-mode\n             mamimo-smartkeys-mode)\n  :config\n  (add-hook! 'mamimo-mode-hook (evil-tex-mode +1)))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "abbrev-1",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Abbrev",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                3,
                [
                    "language-math-predicate",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Language & math predicate",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(defsubst abbrev/math-text-lang-p (lang)\n  (and (mamimo-notmathp)\n       (-any (lambda (k) (string= lang (cadr k)))\n             (org-collect-keywords '(\"language\")))))\n\n(defun abbrev/math-text-pt-p () (abbrev/math-text-lang-p \"pt\"))\n(defun abbrev/math-text-en-p () (abbrev/math-text-lang-p \"en\"))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "textual-abbrevs",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Textual abbrevs",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq abbrev/math-text-abbrevs-pt\n  '((\"pa\" \"podemos assumir\")\n    (\"pd\" \"por definiÃ§Ã£o\")\n    (\"ie\" \"i.e.\")\n    (\"tq\" \"tal que\")\n    (\"spg\" \"sem perda de generalidade\")\n    (\"qtp\" \"q.t.p.\")\n    (\"sss\" \"se, e somente se,\")\n    (\"li\" \"linearmente independentes\")))\n\n(setq abbrev/math-text-abbrevs-en\n  '((\"wlog\" \"without loss of generality\")\n    (\"iff\" \"if and only if\")\n    (\"ie\" \"i.e.\")\n    (\"st\" \"such that\")\n    (\"ae\" \"a.e.\")\n    (\"bd\" \"by definition\")\n    (\"li\" \"linearly independent\")))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "variable-abbrevs",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Variable abbrevs",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq abbrev/var-abbrevs-pt '(b c d f g h i j k l m n p q r s t u v w x y z))\n(setq abbrev/var-abbrevs-en '(b c d e f g h j k l m n o p q r s t u v w x y z))\n\n(defun abbrev/compile-var-abbrevs (abbrevs)\n  (mapcar (lambda (s) (list (symbol-name s) (format \"\\\\(%s\\\\)\" s) nil :system t))\n          abbrevs))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                3,
                [
                    "tables-and-mode-local-tables",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Tables and mode-local tables",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq abbrev/tables\n  `((abbrev/math-text-pt-table\n     ,(append\n       abbrev/math-text-abbrevs-pt\n       (abbrev/compile-var-abbrevs abbrev/var-abbrevs-pt))\n     abbrev/math-text-pt-p)\n    (abbrev/math-text-en-table\n     ,(append\n       abbrev/math-text-abbrevs-en\n       (abbrev/compile-var-abbrevs abbrev/var-abbrevs-en))\n     abbrev/math-text-en-p)))\n\n(defun abbrev/setup ()\n  (require 'abbrev)\n  (setq-local local-abbrev-table nil)\n  (pcase-dolist (`(,name ,defs ,cond) abbrev/tables)\n   (define-abbrev-table name defs :enable-function cond)\n   (push (symbol-value name) local-abbrev-table))\n  (abbrev-mode +1))\n\n(add-hook 'mamimo-mode-hook #'abbrev/setup)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                1,
                [
                    "organize-bindings",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "ORGANIZE Bindings",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                2,
                [
                    "comandos-familiares",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Comandos familiares",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                {
                    "c": "Porque ninguÃ©m merece tantos atalhos diferentes.",
                    "t": "Str"
                }
            ],
            "t": "Para"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(map! :g \"C-s\" 'save-buffer)\n;; (map! :g \"C-/\" 'evilnc-comment-or-uncomment-lines)\n\n(map! :i \"C-v\" 'yank)\n(map! :i \"C-z\" 'evil-undo)\n(map! :i \"C-S-z\" 'evil-redo)\n(map! :i \"C-x\" 'evil-delete)\n(map! :g \"C-<backspace>\" 'evil-delete-backward-word)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "linhas-visuais",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Linhas visuais",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(map! :map evil-motion-state-map\n      \"j\" 'evil-next-visual-line\n      \"k\" 'evil-previous-visual-line\n      \"<down>\" 'evil-next-visual-line\n      \"<up>\" 'evil-previous-visual-line)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "hydras",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Hydras",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                {
                    "c": "Uma histÃ³ria antiga.",
                    "t": "Str"
                }
            ],
            "t": "Para"
        },
        {
            "c": [
                {
                    "c": "NÃ£o gosto do estilo do pop up",
                    "t": "Str"
                }
            ],
            "t": "Para"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(setq hydra-is-helpful nil)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                {
                    "c": "Tamanho da janela",
                    "t": "Str"
                }
            ],
            "t": "Para"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(defhydra window-height-hydra (evil-window-map)\n  \"window height\"\n  (\"=\" evil-window-increase-height \"\")\n  (\"-\" evil-window-decrease-height \"\")\n  (\">\" evil-window-increase-width \"\")\n  (\"<\" evil-window-decrease-width \"\"))\n\n;; (defhydra workspace-hydra (doom-leader-workspace-map)\n;;   \"workspace\"\n;;   (\"]\" +workspace/switch-right \"\")\n;;   (\"[\" +workspace/switch-left \"\")\n;;   (\"}\" +workspace/swap-right \"\")\n;;   (\"{\" +workspace/swap-left \"\"))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "kitty-terminal",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Kitty (Terminal)",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(map! :prefix-map (\"\\x80\" . \"kitty C map\")\n      :map 'key-translation-map\n      \"/\" \"C-/\")\n\n(map! :prefix-map (\"\\x81\" . \"kitty C-S map\")\n      :map 'key-translation-map\n      \"z\" (kbd \"C-S-z\"))\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                2,
                [
                    "leader-edit-key",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Leader edit key",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                "(map! :leader\n      :prefix (\"e\" . \"edit\")\n      :desc \"New snipet\" \"s\" #'+snippets/new\n      :desc \"New alias\" \"a\" #'+snippets/new-alias)\n\n(map! :i \"C-M-x\" ctl-x-map)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                1,
                [
                    "workarounds-1",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Workarounds",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                2,
                [
                    "doom",
                    [
                        ""
                    ],
                    []
                ],
                [
                    {
                        "c": "Doom",
                        "t": "Str"
                    }
                ]
            ],
            "t": "Header"
        },
        {
            "c": [
                {
                    "c": "Those may become obsolete in the future.",
                    "t": "Str"
                }
            ],
            "t": "Para"
        },
        {
            "c": [
                [
                    "",
                    [
                        "elisp"
                    ],
                    []
                ],
                "(unpin! straight)\n"
            ],
            "t": "CodeBlock"
        },
        {
            "c": [
                [
                    "",
                    [
                        "emacs-lisp"
                    ],
                    []
                ],
                ";; for some reason consult preview is not working in +default/p-s \n(map! :leader \"/\" #'+vertico/project-search)\n"
            ],
            "t": "CodeBlock"
        }
    ],
    "meta": {
        "title": {
            "c": [
                {
                    "c": "Emacs Configuration",
                    "t": "Str"
                }
            ],
            "t": "MetaInlines"
        }
    },
    "pandoc-api-version": [
        1,
        23
    ]
}