#+TITLE: Comments on the Org spec

There is no finished "specification" on exactly how an Org parser should behave, but it's generally accepted that a conformant parser is one that behaves just like the ~org-elements~ parser (including its [[bugs]]?). But this is a not very convenient specification: you either need to guess what it does (by calling ~org-element-parse-buffer~), or look at the source code and interpret the not-very-readable regex parsers.

Some efforts are being done to compile a more human readable specification. As of today, the [[https://web.archive.org/web/20220321165301/https://orgmode.org/worg/dev/org-syntax-edited.html][Org syntax (v2\beta)]] page seems to be the most complete in this regard. Since I'm using it to develop the parser, Teco asked me to make notes on it.


* General comments
** Character classes
Many times it's not clear in the spec what the meaning of things like "whitespace", "alphabetic", etc. is. Many times I had to check if things like non-breaking or zero-width space were really spaces, if alphabetic included letters from other scripts etc. I propose to have a table with the character classes that are used so they are also easier to implement at once.

One instance of such problem: in "Text Markup", it says PRE and POST may be whitespace. This includes "special" spaces like zero-width and tab. But in other occurrences of "whitespace" this is not always the case.

Also, common understanding of "alphabetic" usually includes many alphabetic characters from languages other than English. For instance, á, é etc. are characters from the latin alphabet. But this is not what is meant by "alphabetic" in many of its occurrences in the spec, when it usually means a-z,A-Z.
* Elements
** Greater blocks
Countrary to what the spec says it's not possible to quote lines inside.
** Special blocks
It's not possible to quote lines inside verse blocks. And please, if you drop support for flags don't drop support for their functionality (ajusting line number starts and creating referenes to lines of code).
** List Items
It says "not counting lines inside other elements" although lines inside paragraphs do count when they are not indented.
* Objects
** Entities
If the entity ends in ={}=, this is not really part of "POST" as it is parsed as part of the entity.

Also, a big inconsistency related to braces: =\alpha{}= is parsed entirely as an entity while =\_  {}= does not include the final ={}= as part of the entity. For consistency I will not follow this behavior in =org-parser=.
** Export snippets
In =BACKEND=: "zero or more alphanumeric..." should be ONE or more.

** Inline Babel Calls
=ARGUMENTS= is NOT optional, and in "Opening and closing square brackets must be balanced", for arguments parenthesis should be balanced not square brackets.

** Inline Source Blocks
=LANG=: says "A string consisting of any non-whitespace characters", but should not include '{' or '['.

=BODY= is NOT optional, and in "Opening and closing square brackets must be balanced", for body curly braces should be balanced not square brackets.

** Radio links
Is it safe to assume that radio targets match the same /parsed/ data instead of the same raw text? This would make things so much simpler for parsers, and I imagine that's what Org.jl does (since Teco said it was a post-processing step).

For instance, it's confusing to say it matches the raw text when you can have things like =<<<radio/>>>= that do not match =/radio/=. I really have zero idea how emacs figures out radio links just by looking at the spec.

Confusing radio links:

- Nested
  #+begin_src org
<<<abc>>>
<<</abc/ one two three>>>

/abc/ one two three
  #+end_src

** Plain links
It's written that plain links can't contain =()= but they /can/, given that =()= are balanced or something more complex:

#+begin_src org
https://orgmode.(o)rg
#+end_src

** Angle links
=PATHANGLE=: "A string containing any character but ], <, > or \n". But it /can/ contain /all/ these characters except '>'. Newlines are ignored in a particular way.
** Regular links
=PATHREG=: square brackets can appear but escaped.

=DESCRIPTION=: it's not about the balancement of square brackets. You can't balance =[[= with =]]= inside, try it. Brakets can appear freely as long as they don't appear together as =]]=.

** Subscripts/superscripts
Markup is allowed inside super/subscripts when enclosed in brackets.

SIGN should be optional.

** Markup

